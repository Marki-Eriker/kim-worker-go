// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package runtime

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/marki-eriker/kim-worker-go/internal/gql/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Contract() ContractResolver
	ContractMutation() ContractMutationResolver
	ContractQuery() ContractQueryResolver
	Contractor() ContractorResolver
	EmailQuery() EmailQueryResolver
	FileMutation() FileMutationResolver
	Mutation() MutationResolver
	PaymentInvoice() PaymentInvoiceResolver
	PaymentMutation() PaymentMutationResolver
	Query() QueryResolver
	Request() RequestResolver
	RequestMutation() RequestMutationResolver
	RequestQuery() RequestQueryResolver
	User() UserResolver
	UserMutation() UserMutationResolver
	UserQuery() UserQueryResolver
}

type DirectiveRoot struct {
	HasRole func(ctx context.Context, obj interface{}, next graphql.Resolver, role model.BaseRole) (res interface{}, err error)
}

type ComplexityRoot struct {
	Access struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	AccessFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	AccessQuery struct {
		Find func(childComplexity int, ids []uint) int
	}

	BankAccount struct {
		AccountNumber       func(childComplexity int) int
		BankName            func(childComplexity int) int
		Bik                 func(childComplexity int) int
		CorrespondentNumber func(childComplexity int) int
		ID                  func(childComplexity int) int
	}

	BankAccountGetOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	ContactListOutput struct {
		Error      func(childComplexity int) int
		Ok         func(childComplexity int) int
		Pagination func(childComplexity int) int
		Record     func(childComplexity int) int
	}

	Contract struct {
		Contractor        func(childComplexity int) int
		ContractorID      func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		FileStorageItemID func(childComplexity int) int
		ID                func(childComplexity int) int
		Number            func(childComplexity int) int
		PaymentInvoice    func(childComplexity int) int
		ServiceRequest    func(childComplexity int) int
		ServiceRequestID  func(childComplexity int) int
	}

	ContractCreateOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	ContractFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	ContractMutation struct {
		Create func(childComplexity int, input model.ContractCreateInput) int
	}

	ContractQuery struct {
		Find func(childComplexity int, input model.ContractFindInput) int
		ID   func(childComplexity int) int
		List func(childComplexity int, input model.ContractListInput) int
	}

	Contractor struct {
		ContractorType func(childComplexity int) int
		FillName       func(childComplexity int) int
		ID             func(childComplexity int) int
		Person         func(childComplexity int) int
		PersonID       func(childComplexity int) int
		ShortName      func(childComplexity int) int
	}

	ContractorGetOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	EmailQuery struct {
		Send func(childComplexity int, input model.EmailSendInput) int
	}

	EmailSendOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	File struct {
		Checksum         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Extension        func(childComplexity int) int
		ID               func(childComplexity int) int
		MimeType         func(childComplexity int) int
		OriginalFileName func(childComplexity int) int
		Size             func(childComplexity int) int
	}

	FileCreateOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	FileMutation struct {
		Create func(childComplexity int, input model.FileCreateInput) int
	}

	ForbiddenErrorOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	ForbiddenErrorProblem struct {
		Message func(childComplexity int) int
	}

	InternalErrorOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	InternalErrorProblem struct {
		Message func(childComplexity int) int
	}

	Mutation struct {
		Contract func(childComplexity int) int
		File     func(childComplexity int) int
		Payment  func(childComplexity int) int
		Request  func(childComplexity int) int
		User     func(childComplexity int) int
	}

	Navigation struct {
		Description func(childComplexity int) int
		Dev         func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Node        func(childComplexity int) int
		Order       func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Path        func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	NavigationFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	NavigationQuery struct {
		Find func(childComplexity int, ids []uint) int
	}

	OrganizationContact struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Phone func(childComplexity int) int
	}

	OrganizationContactGetOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	PaginationOutput struct {
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		ItemsPerPage    func(childComplexity int) int
		Page            func(childComplexity int) int
		TotalItems      func(childComplexity int) int
		TotalPages      func(childComplexity int) int
	}

	PaymentConfirmation struct {
		ContractID       func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		FileID           func(childComplexity int) int
		ID               func(childComplexity int) int
		PaymentInvoiceID func(childComplexity int) int
		Proven           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PaymentConfirmationApproveOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	PaymentConfirmationCreateOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	PaymentConfirmationFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	PaymentInvoice struct {
		Confirmation func(childComplexity int) int
		ContractID   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		FileID       func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	PaymentInvoiceCreateOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	PaymentInvoiceFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	PaymentMutation struct {
		ApproveConfirmation func(childComplexity int, input model.PaymentConfirmationApproveInput) int
		CreateConfirmation  func(childComplexity int, input model.PaymentConfirmationCreateInput) int
		CreateInvoice       func(childComplexity int, input model.PaymentInvoiceCreateInput) int
	}

	Person struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Phone func(childComplexity int) int
	}

	PersonFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	Query struct {
		Access     func(childComplexity int) int
		Contract   func(childComplexity int) int
		Email      func(childComplexity int) int
		Navigation func(childComplexity int) int
		Request    func(childComplexity int) int
		User       func(childComplexity int) int
	}

	Request struct {
		BankAccount              func(childComplexity int) int
		BankAccountID            func(childComplexity int) int
		ContractFilledTemplateID func(childComplexity int) int
		ContractMediumType       func(childComplexity int) int
		Contractor               func(childComplexity int) int
		ContractorID             func(childComplexity int) int
		Contracts                func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		ID                       func(childComplexity int) int
		OrganizationContact      func(childComplexity int) int
		OrganizationContactID    func(childComplexity int) int
		ServiceType              func(childComplexity int) int
		ServiceTypeID            func(childComplexity int) int
		Ships                    func(childComplexity int) int
		Signatory                func(childComplexity int) int
		SignatoryID              func(childComplexity int) int
		Status                   func(childComplexity int) int
	}

	RequestInfoOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	RequestListOutput struct {
		Error      func(childComplexity int) int
		Ok         func(childComplexity int) int
		Pagination func(childComplexity int) int
		Record     func(childComplexity int) int
	}

	RequestMutation struct {
		UpdateStatus func(childComplexity int, input model.RequestUpdateStatusInput) int
	}

	RequestQuery struct {
		ID   func(childComplexity int) int
		Info func(childComplexity int, input model.RequestInfoInput) int
		List func(childComplexity int, input model.RequestListInput) int
	}

	RequestUpdateStatusOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	ServiceType struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	ServiceTypeGetOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	Ship struct {
		Cubic                           func(childComplexity int) int
		Flag                            func(childComplexity int) int
		HullHeight                      func(childComplexity int) int
		HullNumber                      func(childComplexity int) int
		ID                              func(childComplexity int) int
		Length                          func(childComplexity int) int
		Name                            func(childComplexity int) int
		OwnerShipRightsCertificateIds   func(childComplexity int) int
		ProjectNumber                   func(childComplexity int) int
		ShipConfirmParamsCertificateIds func(childComplexity int) int
		Width                           func(childComplexity int) int
	}

	ShipGetOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	Signatory struct {
		ActingBasis   func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		WarrantDate   func(childComplexity int) int
		WarrantNumber func(childComplexity int) int
	}

	SignatoryGetOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UnauthorizedErrorProblem struct {
		Message func(childComplexity int) int
	}

	UnauthorizedOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UnknowErrorProblem struct {
		Message func(childComplexity int) int
	}

	User struct {
		Access       func(childComplexity int) int
		BaseRole     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		FullName     func(childComplexity int) int
		ID           func(childComplexity int) int
		Navigation   func(childComplexity int) int
		ServiceTypes func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UserCreateOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UserDeleteOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UserFindOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UserGrantRequestAccessOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UserListOutput struct {
		Error      func(childComplexity int) int
		Ok         func(childComplexity int) int
		Pagination func(childComplexity int) int
		Record     func(childComplexity int) int
	}

	UserLoginOutput struct {
		AccessToken func(childComplexity int) int
		Error       func(childComplexity int) int
		Ok          func(childComplexity int) int
	}

	UserLogoutOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UserMeOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UserMutation struct {
		Create             func(childComplexity int, input model.UserCreateInput) int
		Delete             func(childComplexity int, id uint) int
		GrantRequestAccess func(childComplexity int, input model.UserGrantRequestAccessInput) int
		Login              func(childComplexity int, input model.UserLoginInput) int
		Logout             func(childComplexity int) int
		UpdateMain         func(childComplexity int, input model.UserUpdateMainInput) int
		UpdateMe           func(childComplexity int, input model.UserUpdateMeInput) int
		UpdatePassword     func(childComplexity int, input model.UserUpdatePasswordInput) int
	}

	UserQuery struct {
		Find    func(childComplexity int, input model.UserFindInput) int
		ID      func(childComplexity int) int
		List    func(childComplexity int, input model.UserListInput) int
		Me      func(childComplexity int) int
		Refresh func(childComplexity int) int
	}

	UserRefreshOutput struct {
		AccessToken func(childComplexity int) int
		Error       func(childComplexity int) int
		Ok          func(childComplexity int) int
	}

	UserUpdateMainOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UserUpdateMeOutput struct {
		Error  func(childComplexity int) int
		Ok     func(childComplexity int) int
		Record func(childComplexity int) int
	}

	UserUpdatePasswordOutput struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	ValidationErrorProblem struct {
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}
}

type ContractResolver interface {
	ServiceRequest(ctx context.Context, obj *model.Contract) (*model.RequestInfoOutput, error)

	Contractor(ctx context.Context, obj *model.Contract) (*model.ContractorGetOutput, error)

	PaymentInvoice(ctx context.Context, obj *model.Contract) (*model.PaymentInvoiceFindOutput, error)
}
type ContractMutationResolver interface {
	Create(ctx context.Context, obj *model.ContractMutation, input model.ContractCreateInput) (*model.ContractCreateOutput, error)
}
type ContractQueryResolver interface {
	Find(ctx context.Context, obj *model.ContractQuery, input model.ContractFindInput) (*model.ContractFindOutput, error)
	List(ctx context.Context, obj *model.ContractQuery, input model.ContractListInput) (*model.ContactListOutput, error)
}
type ContractorResolver interface {
	Person(ctx context.Context, obj *model.Contractor) (*model.PersonFindOutput, error)
}
type EmailQueryResolver interface {
	Send(ctx context.Context, obj *model.EmailQuery, input model.EmailSendInput) (*model.EmailSendOutput, error)
}
type FileMutationResolver interface {
	Create(ctx context.Context, obj *model.FileMutation, input model.FileCreateInput) (*model.FileCreateOutput, error)
}
type MutationResolver interface {
	Contract(ctx context.Context) (*model.ContractMutation, error)
	File(ctx context.Context) (*model.FileMutation, error)
	Payment(ctx context.Context) (*model.PaymentMutation, error)
	Request(ctx context.Context) (*model.RequestMutation, error)
	User(ctx context.Context) (*model.UserMutation, error)
}
type PaymentInvoiceResolver interface {
	Confirmation(ctx context.Context, obj *model.PaymentInvoice) (*model.PaymentConfirmationFindOutput, error)
}
type PaymentMutationResolver interface {
	ApproveConfirmation(ctx context.Context, obj *model.PaymentMutation, input model.PaymentConfirmationApproveInput) (*model.PaymentConfirmationApproveOutput, error)
	CreateInvoice(ctx context.Context, obj *model.PaymentMutation, input model.PaymentInvoiceCreateInput) (*model.PaymentInvoiceCreateOutput, error)
	CreateConfirmation(ctx context.Context, obj *model.PaymentMutation, input model.PaymentConfirmationCreateInput) (*model.PaymentConfirmationCreateOutput, error)
}
type QueryResolver interface {
	Access(ctx context.Context) (*model.AccessQuery, error)
	Contract(ctx context.Context) (*model.ContractQuery, error)
	Email(ctx context.Context) (*model.EmailQuery, error)
	Navigation(ctx context.Context) (*model.NavigationQuery, error)
	Request(ctx context.Context) (*model.RequestQuery, error)
	User(ctx context.Context) (*model.UserQuery, error)
}
type RequestResolver interface {
	ServiceType(ctx context.Context, obj *model.Request) (*model.ServiceTypeGetOutput, error)

	Contractor(ctx context.Context, obj *model.Request) (*model.ContractorGetOutput, error)

	OrganizationContact(ctx context.Context, obj *model.Request) (*model.OrganizationContactGetOutput, error)

	BankAccount(ctx context.Context, obj *model.Request) (*model.BankAccountGetOutput, error)

	Signatory(ctx context.Context, obj *model.Request) (*model.SignatoryGetOutput, error)
	Ships(ctx context.Context, obj *model.Request) (*model.ShipGetOutput, error)
	Contracts(ctx context.Context, obj *model.Request) (*model.ContactListOutput, error)
}
type RequestMutationResolver interface {
	UpdateStatus(ctx context.Context, obj *model.RequestMutation, input model.RequestUpdateStatusInput) (*model.RequestUpdateStatusOutput, error)
}
type RequestQueryResolver interface {
	Info(ctx context.Context, obj *model.RequestQuery, input model.RequestInfoInput) (*model.RequestInfoOutput, error)
	List(ctx context.Context, obj *model.RequestQuery, input model.RequestListInput) (*model.RequestListOutput, error)
}
type UserResolver interface {
	Navigation(ctx context.Context, obj *model.User) (*model.NavigationFindOutput, error)
	Access(ctx context.Context, obj *model.User) (*model.AccessFindOutput, error)
}
type UserMutationResolver interface {
	Create(ctx context.Context, obj *model.UserMutation, input model.UserCreateInput) (*model.UserCreateOutput, error)
	Delete(ctx context.Context, obj *model.UserMutation, id uint) (*model.UserDeleteOutput, error)
	GrantRequestAccess(ctx context.Context, obj *model.UserMutation, input model.UserGrantRequestAccessInput) (*model.UserGrantRequestAccessOutput, error)
	Login(ctx context.Context, obj *model.UserMutation, input model.UserLoginInput) (*model.UserLoginOutput, error)
	Logout(ctx context.Context, obj *model.UserMutation) (*model.UserLogoutOutput, error)
	UpdateMain(ctx context.Context, obj *model.UserMutation, input model.UserUpdateMainInput) (*model.UserUpdateMainOutput, error)
	UpdateMe(ctx context.Context, obj *model.UserMutation, input model.UserUpdateMeInput) (*model.UserUpdateMeOutput, error)
	UpdatePassword(ctx context.Context, obj *model.UserMutation, input model.UserUpdatePasswordInput) (*model.UserUpdatePasswordOutput, error)
}
type UserQueryResolver interface {
	Find(ctx context.Context, obj *model.UserQuery, input model.UserFindInput) (*model.UserFindOutput, error)
	List(ctx context.Context, obj *model.UserQuery, input model.UserListInput) (*model.UserListOutput, error)
	Me(ctx context.Context, obj *model.UserQuery) (*model.UserMeOutput, error)
	Refresh(ctx context.Context, obj *model.UserQuery) (*model.UserRefreshOutput, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Access.id":
		if e.complexity.Access.ID == nil {
			break
		}

		return e.complexity.Access.ID(childComplexity), true

	case "Access.name":
		if e.complexity.Access.Name == nil {
			break
		}

		return e.complexity.Access.Name(childComplexity), true

	case "AccessFindOutput.error":
		if e.complexity.AccessFindOutput.Error == nil {
			break
		}

		return e.complexity.AccessFindOutput.Error(childComplexity), true

	case "AccessFindOutput.ok":
		if e.complexity.AccessFindOutput.Ok == nil {
			break
		}

		return e.complexity.AccessFindOutput.Ok(childComplexity), true

	case "AccessFindOutput.record":
		if e.complexity.AccessFindOutput.Record == nil {
			break
		}

		return e.complexity.AccessFindOutput.Record(childComplexity), true

	case "AccessQuery.find":
		if e.complexity.AccessQuery.Find == nil {
			break
		}

		args, err := ec.field_AccessQuery_find_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccessQuery.Find(childComplexity, args["ids"].([]uint)), true

	case "BankAccount.accountNumber":
		if e.complexity.BankAccount.AccountNumber == nil {
			break
		}

		return e.complexity.BankAccount.AccountNumber(childComplexity), true

	case "BankAccount.bankName":
		if e.complexity.BankAccount.BankName == nil {
			break
		}

		return e.complexity.BankAccount.BankName(childComplexity), true

	case "BankAccount.bik":
		if e.complexity.BankAccount.Bik == nil {
			break
		}

		return e.complexity.BankAccount.Bik(childComplexity), true

	case "BankAccount.correspondentNumber":
		if e.complexity.BankAccount.CorrespondentNumber == nil {
			break
		}

		return e.complexity.BankAccount.CorrespondentNumber(childComplexity), true

	case "BankAccount.id":
		if e.complexity.BankAccount.ID == nil {
			break
		}

		return e.complexity.BankAccount.ID(childComplexity), true

	case "BankAccountGetOutput.error":
		if e.complexity.BankAccountGetOutput.Error == nil {
			break
		}

		return e.complexity.BankAccountGetOutput.Error(childComplexity), true

	case "BankAccountGetOutput.ok":
		if e.complexity.BankAccountGetOutput.Ok == nil {
			break
		}

		return e.complexity.BankAccountGetOutput.Ok(childComplexity), true

	case "BankAccountGetOutput.record":
		if e.complexity.BankAccountGetOutput.Record == nil {
			break
		}

		return e.complexity.BankAccountGetOutput.Record(childComplexity), true

	case "ContactListOutput.error":
		if e.complexity.ContactListOutput.Error == nil {
			break
		}

		return e.complexity.ContactListOutput.Error(childComplexity), true

	case "ContactListOutput.ok":
		if e.complexity.ContactListOutput.Ok == nil {
			break
		}

		return e.complexity.ContactListOutput.Ok(childComplexity), true

	case "ContactListOutput.pagination":
		if e.complexity.ContactListOutput.Pagination == nil {
			break
		}

		return e.complexity.ContactListOutput.Pagination(childComplexity), true

	case "ContactListOutput.record":
		if e.complexity.ContactListOutput.Record == nil {
			break
		}

		return e.complexity.ContactListOutput.Record(childComplexity), true

	case "Contract.contractor":
		if e.complexity.Contract.Contractor == nil {
			break
		}

		return e.complexity.Contract.Contractor(childComplexity), true

	case "Contract.contractorID":
		if e.complexity.Contract.ContractorID == nil {
			break
		}

		return e.complexity.Contract.ContractorID(childComplexity), true

	case "Contract.createdAt":
		if e.complexity.Contract.CreatedAt == nil {
			break
		}

		return e.complexity.Contract.CreatedAt(childComplexity), true

	case "Contract.fileStorageItemID":
		if e.complexity.Contract.FileStorageItemID == nil {
			break
		}

		return e.complexity.Contract.FileStorageItemID(childComplexity), true

	case "Contract.id":
		if e.complexity.Contract.ID == nil {
			break
		}

		return e.complexity.Contract.ID(childComplexity), true

	case "Contract.number":
		if e.complexity.Contract.Number == nil {
			break
		}

		return e.complexity.Contract.Number(childComplexity), true

	case "Contract.paymentInvoice":
		if e.complexity.Contract.PaymentInvoice == nil {
			break
		}

		return e.complexity.Contract.PaymentInvoice(childComplexity), true

	case "Contract.serviceRequest":
		if e.complexity.Contract.ServiceRequest == nil {
			break
		}

		return e.complexity.Contract.ServiceRequest(childComplexity), true

	case "Contract.serviceRequestID":
		if e.complexity.Contract.ServiceRequestID == nil {
			break
		}

		return e.complexity.Contract.ServiceRequestID(childComplexity), true

	case "ContractCreateOutput.error":
		if e.complexity.ContractCreateOutput.Error == nil {
			break
		}

		return e.complexity.ContractCreateOutput.Error(childComplexity), true

	case "ContractCreateOutput.ok":
		if e.complexity.ContractCreateOutput.Ok == nil {
			break
		}

		return e.complexity.ContractCreateOutput.Ok(childComplexity), true

	case "ContractCreateOutput.record":
		if e.complexity.ContractCreateOutput.Record == nil {
			break
		}

		return e.complexity.ContractCreateOutput.Record(childComplexity), true

	case "ContractFindOutput.error":
		if e.complexity.ContractFindOutput.Error == nil {
			break
		}

		return e.complexity.ContractFindOutput.Error(childComplexity), true

	case "ContractFindOutput.ok":
		if e.complexity.ContractFindOutput.Ok == nil {
			break
		}

		return e.complexity.ContractFindOutput.Ok(childComplexity), true

	case "ContractFindOutput.record":
		if e.complexity.ContractFindOutput.Record == nil {
			break
		}

		return e.complexity.ContractFindOutput.Record(childComplexity), true

	case "ContractMutation.create":
		if e.complexity.ContractMutation.Create == nil {
			break
		}

		args, err := ec.field_ContractMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContractMutation.Create(childComplexity, args["input"].(model.ContractCreateInput)), true

	case "ContractQuery.find":
		if e.complexity.ContractQuery.Find == nil {
			break
		}

		args, err := ec.field_ContractQuery_find_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContractQuery.Find(childComplexity, args["input"].(model.ContractFindInput)), true

	case "ContractQuery.id":
		if e.complexity.ContractQuery.ID == nil {
			break
		}

		return e.complexity.ContractQuery.ID(childComplexity), true

	case "ContractQuery.list":
		if e.complexity.ContractQuery.List == nil {
			break
		}

		args, err := ec.field_ContractQuery_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContractQuery.List(childComplexity, args["input"].(model.ContractListInput)), true

	case "Contractor.contractorType":
		if e.complexity.Contractor.ContractorType == nil {
			break
		}

		return e.complexity.Contractor.ContractorType(childComplexity), true

	case "Contractor.fillName":
		if e.complexity.Contractor.FillName == nil {
			break
		}

		return e.complexity.Contractor.FillName(childComplexity), true

	case "Contractor.id":
		if e.complexity.Contractor.ID == nil {
			break
		}

		return e.complexity.Contractor.ID(childComplexity), true

	case "Contractor.person":
		if e.complexity.Contractor.Person == nil {
			break
		}

		return e.complexity.Contractor.Person(childComplexity), true

	case "Contractor.personId":
		if e.complexity.Contractor.PersonID == nil {
			break
		}

		return e.complexity.Contractor.PersonID(childComplexity), true

	case "Contractor.shortName":
		if e.complexity.Contractor.ShortName == nil {
			break
		}

		return e.complexity.Contractor.ShortName(childComplexity), true

	case "ContractorGetOutput.error":
		if e.complexity.ContractorGetOutput.Error == nil {
			break
		}

		return e.complexity.ContractorGetOutput.Error(childComplexity), true

	case "ContractorGetOutput.ok":
		if e.complexity.ContractorGetOutput.Ok == nil {
			break
		}

		return e.complexity.ContractorGetOutput.Ok(childComplexity), true

	case "ContractorGetOutput.record":
		if e.complexity.ContractorGetOutput.Record == nil {
			break
		}

		return e.complexity.ContractorGetOutput.Record(childComplexity), true

	case "EmailQuery.send":
		if e.complexity.EmailQuery.Send == nil {
			break
		}

		args, err := ec.field_EmailQuery_send_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EmailQuery.Send(childComplexity, args["input"].(model.EmailSendInput)), true

	case "EmailSendOutput.error":
		if e.complexity.EmailSendOutput.Error == nil {
			break
		}

		return e.complexity.EmailSendOutput.Error(childComplexity), true

	case "EmailSendOutput.ok":
		if e.complexity.EmailSendOutput.Ok == nil {
			break
		}

		return e.complexity.EmailSendOutput.Ok(childComplexity), true

	case "File.checksum":
		if e.complexity.File.Checksum == nil {
			break
		}

		return e.complexity.File.Checksum(childComplexity), true

	case "File.createdAt":
		if e.complexity.File.CreatedAt == nil {
			break
		}

		return e.complexity.File.CreatedAt(childComplexity), true

	case "File.extension":
		if e.complexity.File.Extension == nil {
			break
		}

		return e.complexity.File.Extension(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.mimeType":
		if e.complexity.File.MimeType == nil {
			break
		}

		return e.complexity.File.MimeType(childComplexity), true

	case "File.originalFileName":
		if e.complexity.File.OriginalFileName == nil {
			break
		}

		return e.complexity.File.OriginalFileName(childComplexity), true

	case "File.size":
		if e.complexity.File.Size == nil {
			break
		}

		return e.complexity.File.Size(childComplexity), true

	case "FileCreateOutput.error":
		if e.complexity.FileCreateOutput.Error == nil {
			break
		}

		return e.complexity.FileCreateOutput.Error(childComplexity), true

	case "FileCreateOutput.ok":
		if e.complexity.FileCreateOutput.Ok == nil {
			break
		}

		return e.complexity.FileCreateOutput.Ok(childComplexity), true

	case "FileCreateOutput.record":
		if e.complexity.FileCreateOutput.Record == nil {
			break
		}

		return e.complexity.FileCreateOutput.Record(childComplexity), true

	case "FileMutation.create":
		if e.complexity.FileMutation.Create == nil {
			break
		}

		args, err := ec.field_FileMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.FileMutation.Create(childComplexity, args["input"].(model.FileCreateInput)), true

	case "ForbiddenErrorOutput.error":
		if e.complexity.ForbiddenErrorOutput.Error == nil {
			break
		}

		return e.complexity.ForbiddenErrorOutput.Error(childComplexity), true

	case "ForbiddenErrorOutput.ok":
		if e.complexity.ForbiddenErrorOutput.Ok == nil {
			break
		}

		return e.complexity.ForbiddenErrorOutput.Ok(childComplexity), true

	case "ForbiddenErrorProblem.message":
		if e.complexity.ForbiddenErrorProblem.Message == nil {
			break
		}

		return e.complexity.ForbiddenErrorProblem.Message(childComplexity), true

	case "InternalErrorOutput.error":
		if e.complexity.InternalErrorOutput.Error == nil {
			break
		}

		return e.complexity.InternalErrorOutput.Error(childComplexity), true

	case "InternalErrorOutput.ok":
		if e.complexity.InternalErrorOutput.Ok == nil {
			break
		}

		return e.complexity.InternalErrorOutput.Ok(childComplexity), true

	case "InternalErrorProblem.message":
		if e.complexity.InternalErrorProblem.Message == nil {
			break
		}

		return e.complexity.InternalErrorProblem.Message(childComplexity), true

	case "Mutation.contract":
		if e.complexity.Mutation.Contract == nil {
			break
		}

		return e.complexity.Mutation.Contract(childComplexity), true

	case "Mutation.file":
		if e.complexity.Mutation.File == nil {
			break
		}

		return e.complexity.Mutation.File(childComplexity), true

	case "Mutation.payment":
		if e.complexity.Mutation.Payment == nil {
			break
		}

		return e.complexity.Mutation.Payment(childComplexity), true

	case "Mutation.request":
		if e.complexity.Mutation.Request == nil {
			break
		}

		return e.complexity.Mutation.Request(childComplexity), true

	case "Mutation.user":
		if e.complexity.Mutation.User == nil {
			break
		}

		return e.complexity.Mutation.User(childComplexity), true

	case "Navigation.description":
		if e.complexity.Navigation.Description == nil {
			break
		}

		return e.complexity.Navigation.Description(childComplexity), true

	case "Navigation.dev":
		if e.complexity.Navigation.Dev == nil {
			break
		}

		return e.complexity.Navigation.Dev(childComplexity), true

	case "Navigation.id":
		if e.complexity.Navigation.ID == nil {
			break
		}

		return e.complexity.Navigation.ID(childComplexity), true

	case "Navigation.icon":
		if e.complexity.Navigation.Icon == nil {
			break
		}

		return e.complexity.Navigation.Icon(childComplexity), true

	case "Navigation.node":
		if e.complexity.Navigation.Node == nil {
			break
		}

		return e.complexity.Navigation.Node(childComplexity), true

	case "Navigation.order":
		if e.complexity.Navigation.Order == nil {
			break
		}

		return e.complexity.Navigation.Order(childComplexity), true

	case "Navigation.parentId":
		if e.complexity.Navigation.ParentID == nil {
			break
		}

		return e.complexity.Navigation.ParentID(childComplexity), true

	case "Navigation.path":
		if e.complexity.Navigation.Path == nil {
			break
		}

		return e.complexity.Navigation.Path(childComplexity), true

	case "Navigation.title":
		if e.complexity.Navigation.Title == nil {
			break
		}

		return e.complexity.Navigation.Title(childComplexity), true

	case "NavigationFindOutput.error":
		if e.complexity.NavigationFindOutput.Error == nil {
			break
		}

		return e.complexity.NavigationFindOutput.Error(childComplexity), true

	case "NavigationFindOutput.ok":
		if e.complexity.NavigationFindOutput.Ok == nil {
			break
		}

		return e.complexity.NavigationFindOutput.Ok(childComplexity), true

	case "NavigationFindOutput.record":
		if e.complexity.NavigationFindOutput.Record == nil {
			break
		}

		return e.complexity.NavigationFindOutput.Record(childComplexity), true

	case "NavigationQuery.find":
		if e.complexity.NavigationQuery.Find == nil {
			break
		}

		args, err := ec.field_NavigationQuery_find_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.NavigationQuery.Find(childComplexity, args["ids"].([]uint)), true

	case "OrganizationContact.email":
		if e.complexity.OrganizationContact.Email == nil {
			break
		}

		return e.complexity.OrganizationContact.Email(childComplexity), true

	case "OrganizationContact.id":
		if e.complexity.OrganizationContact.ID == nil {
			break
		}

		return e.complexity.OrganizationContact.ID(childComplexity), true

	case "OrganizationContact.phone":
		if e.complexity.OrganizationContact.Phone == nil {
			break
		}

		return e.complexity.OrganizationContact.Phone(childComplexity), true

	case "OrganizationContactGetOutput.error":
		if e.complexity.OrganizationContactGetOutput.Error == nil {
			break
		}

		return e.complexity.OrganizationContactGetOutput.Error(childComplexity), true

	case "OrganizationContactGetOutput.ok":
		if e.complexity.OrganizationContactGetOutput.Ok == nil {
			break
		}

		return e.complexity.OrganizationContactGetOutput.Ok(childComplexity), true

	case "OrganizationContactGetOutput.record":
		if e.complexity.OrganizationContactGetOutput.Record == nil {
			break
		}

		return e.complexity.OrganizationContactGetOutput.Record(childComplexity), true

	case "PaginationOutput.hasNextPage":
		if e.complexity.PaginationOutput.HasNextPage == nil {
			break
		}

		return e.complexity.PaginationOutput.HasNextPage(childComplexity), true

	case "PaginationOutput.hasPreviousPage":
		if e.complexity.PaginationOutput.HasPreviousPage == nil {
			break
		}

		return e.complexity.PaginationOutput.HasPreviousPage(childComplexity), true

	case "PaginationOutput.itemsPerPage":
		if e.complexity.PaginationOutput.ItemsPerPage == nil {
			break
		}

		return e.complexity.PaginationOutput.ItemsPerPage(childComplexity), true

	case "PaginationOutput.page":
		if e.complexity.PaginationOutput.Page == nil {
			break
		}

		return e.complexity.PaginationOutput.Page(childComplexity), true

	case "PaginationOutput.totalItems":
		if e.complexity.PaginationOutput.TotalItems == nil {
			break
		}

		return e.complexity.PaginationOutput.TotalItems(childComplexity), true

	case "PaginationOutput.totalPages":
		if e.complexity.PaginationOutput.TotalPages == nil {
			break
		}

		return e.complexity.PaginationOutput.TotalPages(childComplexity), true

	case "PaymentConfirmation.contractID":
		if e.complexity.PaymentConfirmation.ContractID == nil {
			break
		}

		return e.complexity.PaymentConfirmation.ContractID(childComplexity), true

	case "PaymentConfirmation.createdAt":
		if e.complexity.PaymentConfirmation.CreatedAt == nil {
			break
		}

		return e.complexity.PaymentConfirmation.CreatedAt(childComplexity), true

	case "PaymentConfirmation.fileID":
		if e.complexity.PaymentConfirmation.FileID == nil {
			break
		}

		return e.complexity.PaymentConfirmation.FileID(childComplexity), true

	case "PaymentConfirmation.id":
		if e.complexity.PaymentConfirmation.ID == nil {
			break
		}

		return e.complexity.PaymentConfirmation.ID(childComplexity), true

	case "PaymentConfirmation.paymentInvoiceID":
		if e.complexity.PaymentConfirmation.PaymentInvoiceID == nil {
			break
		}

		return e.complexity.PaymentConfirmation.PaymentInvoiceID(childComplexity), true

	case "PaymentConfirmation.proven":
		if e.complexity.PaymentConfirmation.Proven == nil {
			break
		}

		return e.complexity.PaymentConfirmation.Proven(childComplexity), true

	case "PaymentConfirmation.updatedAt":
		if e.complexity.PaymentConfirmation.UpdatedAt == nil {
			break
		}

		return e.complexity.PaymentConfirmation.UpdatedAt(childComplexity), true

	case "PaymentConfirmationApproveOutput.error":
		if e.complexity.PaymentConfirmationApproveOutput.Error == nil {
			break
		}

		return e.complexity.PaymentConfirmationApproveOutput.Error(childComplexity), true

	case "PaymentConfirmationApproveOutput.ok":
		if e.complexity.PaymentConfirmationApproveOutput.Ok == nil {
			break
		}

		return e.complexity.PaymentConfirmationApproveOutput.Ok(childComplexity), true

	case "PaymentConfirmationApproveOutput.record":
		if e.complexity.PaymentConfirmationApproveOutput.Record == nil {
			break
		}

		return e.complexity.PaymentConfirmationApproveOutput.Record(childComplexity), true

	case "PaymentConfirmationCreateOutput.error":
		if e.complexity.PaymentConfirmationCreateOutput.Error == nil {
			break
		}

		return e.complexity.PaymentConfirmationCreateOutput.Error(childComplexity), true

	case "PaymentConfirmationCreateOutput.ok":
		if e.complexity.PaymentConfirmationCreateOutput.Ok == nil {
			break
		}

		return e.complexity.PaymentConfirmationCreateOutput.Ok(childComplexity), true

	case "PaymentConfirmationCreateOutput.record":
		if e.complexity.PaymentConfirmationCreateOutput.Record == nil {
			break
		}

		return e.complexity.PaymentConfirmationCreateOutput.Record(childComplexity), true

	case "PaymentConfirmationFindOutput.error":
		if e.complexity.PaymentConfirmationFindOutput.Error == nil {
			break
		}

		return e.complexity.PaymentConfirmationFindOutput.Error(childComplexity), true

	case "PaymentConfirmationFindOutput.ok":
		if e.complexity.PaymentConfirmationFindOutput.Ok == nil {
			break
		}

		return e.complexity.PaymentConfirmationFindOutput.Ok(childComplexity), true

	case "PaymentConfirmationFindOutput.record":
		if e.complexity.PaymentConfirmationFindOutput.Record == nil {
			break
		}

		return e.complexity.PaymentConfirmationFindOutput.Record(childComplexity), true

	case "PaymentInvoice.confirmation":
		if e.complexity.PaymentInvoice.Confirmation == nil {
			break
		}

		return e.complexity.PaymentInvoice.Confirmation(childComplexity), true

	case "PaymentInvoice.contractID":
		if e.complexity.PaymentInvoice.ContractID == nil {
			break
		}

		return e.complexity.PaymentInvoice.ContractID(childComplexity), true

	case "PaymentInvoice.createdAt":
		if e.complexity.PaymentInvoice.CreatedAt == nil {
			break
		}

		return e.complexity.PaymentInvoice.CreatedAt(childComplexity), true

	case "PaymentInvoice.fileID":
		if e.complexity.PaymentInvoice.FileID == nil {
			break
		}

		return e.complexity.PaymentInvoice.FileID(childComplexity), true

	case "PaymentInvoice.id":
		if e.complexity.PaymentInvoice.ID == nil {
			break
		}

		return e.complexity.PaymentInvoice.ID(childComplexity), true

	case "PaymentInvoiceCreateOutput.error":
		if e.complexity.PaymentInvoiceCreateOutput.Error == nil {
			break
		}

		return e.complexity.PaymentInvoiceCreateOutput.Error(childComplexity), true

	case "PaymentInvoiceCreateOutput.ok":
		if e.complexity.PaymentInvoiceCreateOutput.Ok == nil {
			break
		}

		return e.complexity.PaymentInvoiceCreateOutput.Ok(childComplexity), true

	case "PaymentInvoiceCreateOutput.record":
		if e.complexity.PaymentInvoiceCreateOutput.Record == nil {
			break
		}

		return e.complexity.PaymentInvoiceCreateOutput.Record(childComplexity), true

	case "PaymentInvoiceFindOutput.error":
		if e.complexity.PaymentInvoiceFindOutput.Error == nil {
			break
		}

		return e.complexity.PaymentInvoiceFindOutput.Error(childComplexity), true

	case "PaymentInvoiceFindOutput.ok":
		if e.complexity.PaymentInvoiceFindOutput.Ok == nil {
			break
		}

		return e.complexity.PaymentInvoiceFindOutput.Ok(childComplexity), true

	case "PaymentInvoiceFindOutput.record":
		if e.complexity.PaymentInvoiceFindOutput.Record == nil {
			break
		}

		return e.complexity.PaymentInvoiceFindOutput.Record(childComplexity), true

	case "PaymentMutation.approveConfirmation":
		if e.complexity.PaymentMutation.ApproveConfirmation == nil {
			break
		}

		args, err := ec.field_PaymentMutation_approveConfirmation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PaymentMutation.ApproveConfirmation(childComplexity, args["input"].(model.PaymentConfirmationApproveInput)), true

	case "PaymentMutation.createConfirmation":
		if e.complexity.PaymentMutation.CreateConfirmation == nil {
			break
		}

		args, err := ec.field_PaymentMutation_createConfirmation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PaymentMutation.CreateConfirmation(childComplexity, args["input"].(model.PaymentConfirmationCreateInput)), true

	case "PaymentMutation.createInvoice":
		if e.complexity.PaymentMutation.CreateInvoice == nil {
			break
		}

		args, err := ec.field_PaymentMutation_createInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PaymentMutation.CreateInvoice(childComplexity, args["input"].(model.PaymentInvoiceCreateInput)), true

	case "Person.email":
		if e.complexity.Person.Email == nil {
			break
		}

		return e.complexity.Person.Email(childComplexity), true

	case "Person.id":
		if e.complexity.Person.ID == nil {
			break
		}

		return e.complexity.Person.ID(childComplexity), true

	case "Person.phone":
		if e.complexity.Person.Phone == nil {
			break
		}

		return e.complexity.Person.Phone(childComplexity), true

	case "PersonFindOutput.error":
		if e.complexity.PersonFindOutput.Error == nil {
			break
		}

		return e.complexity.PersonFindOutput.Error(childComplexity), true

	case "PersonFindOutput.ok":
		if e.complexity.PersonFindOutput.Ok == nil {
			break
		}

		return e.complexity.PersonFindOutput.Ok(childComplexity), true

	case "PersonFindOutput.record":
		if e.complexity.PersonFindOutput.Record == nil {
			break
		}

		return e.complexity.PersonFindOutput.Record(childComplexity), true

	case "Query.access":
		if e.complexity.Query.Access == nil {
			break
		}

		return e.complexity.Query.Access(childComplexity), true

	case "Query.contract":
		if e.complexity.Query.Contract == nil {
			break
		}

		return e.complexity.Query.Contract(childComplexity), true

	case "Query.email":
		if e.complexity.Query.Email == nil {
			break
		}

		return e.complexity.Query.Email(childComplexity), true

	case "Query.navigation":
		if e.complexity.Query.Navigation == nil {
			break
		}

		return e.complexity.Query.Navigation(childComplexity), true

	case "Query.request":
		if e.complexity.Query.Request == nil {
			break
		}

		return e.complexity.Query.Request(childComplexity), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		return e.complexity.Query.User(childComplexity), true

	case "Request.bankAccount":
		if e.complexity.Request.BankAccount == nil {
			break
		}

		return e.complexity.Request.BankAccount(childComplexity), true

	case "Request.bankAccountID":
		if e.complexity.Request.BankAccountID == nil {
			break
		}

		return e.complexity.Request.BankAccountID(childComplexity), true

	case "Request.contractFilledTemplateID":
		if e.complexity.Request.ContractFilledTemplateID == nil {
			break
		}

		return e.complexity.Request.ContractFilledTemplateID(childComplexity), true

	case "Request.contractMediumType":
		if e.complexity.Request.ContractMediumType == nil {
			break
		}

		return e.complexity.Request.ContractMediumType(childComplexity), true

	case "Request.contractor":
		if e.complexity.Request.Contractor == nil {
			break
		}

		return e.complexity.Request.Contractor(childComplexity), true

	case "Request.contractorID":
		if e.complexity.Request.ContractorID == nil {
			break
		}

		return e.complexity.Request.ContractorID(childComplexity), true

	case "Request.contracts":
		if e.complexity.Request.Contracts == nil {
			break
		}

		return e.complexity.Request.Contracts(childComplexity), true

	case "Request.createdAt":
		if e.complexity.Request.CreatedAt == nil {
			break
		}

		return e.complexity.Request.CreatedAt(childComplexity), true

	case "Request.id":
		if e.complexity.Request.ID == nil {
			break
		}

		return e.complexity.Request.ID(childComplexity), true

	case "Request.organizationContact":
		if e.complexity.Request.OrganizationContact == nil {
			break
		}

		return e.complexity.Request.OrganizationContact(childComplexity), true

	case "Request.organizationContactID":
		if e.complexity.Request.OrganizationContactID == nil {
			break
		}

		return e.complexity.Request.OrganizationContactID(childComplexity), true

	case "Request.serviceType":
		if e.complexity.Request.ServiceType == nil {
			break
		}

		return e.complexity.Request.ServiceType(childComplexity), true

	case "Request.serviceTypeID":
		if e.complexity.Request.ServiceTypeID == nil {
			break
		}

		return e.complexity.Request.ServiceTypeID(childComplexity), true

	case "Request.ships":
		if e.complexity.Request.Ships == nil {
			break
		}

		return e.complexity.Request.Ships(childComplexity), true

	case "Request.signatory":
		if e.complexity.Request.Signatory == nil {
			break
		}

		return e.complexity.Request.Signatory(childComplexity), true

	case "Request.signatoryID":
		if e.complexity.Request.SignatoryID == nil {
			break
		}

		return e.complexity.Request.SignatoryID(childComplexity), true

	case "Request.status":
		if e.complexity.Request.Status == nil {
			break
		}

		return e.complexity.Request.Status(childComplexity), true

	case "RequestInfoOutput.error":
		if e.complexity.RequestInfoOutput.Error == nil {
			break
		}

		return e.complexity.RequestInfoOutput.Error(childComplexity), true

	case "RequestInfoOutput.ok":
		if e.complexity.RequestInfoOutput.Ok == nil {
			break
		}

		return e.complexity.RequestInfoOutput.Ok(childComplexity), true

	case "RequestInfoOutput.record":
		if e.complexity.RequestInfoOutput.Record == nil {
			break
		}

		return e.complexity.RequestInfoOutput.Record(childComplexity), true

	case "RequestListOutput.error":
		if e.complexity.RequestListOutput.Error == nil {
			break
		}

		return e.complexity.RequestListOutput.Error(childComplexity), true

	case "RequestListOutput.ok":
		if e.complexity.RequestListOutput.Ok == nil {
			break
		}

		return e.complexity.RequestListOutput.Ok(childComplexity), true

	case "RequestListOutput.pagination":
		if e.complexity.RequestListOutput.Pagination == nil {
			break
		}

		return e.complexity.RequestListOutput.Pagination(childComplexity), true

	case "RequestListOutput.record":
		if e.complexity.RequestListOutput.Record == nil {
			break
		}

		return e.complexity.RequestListOutput.Record(childComplexity), true

	case "RequestMutation.updateStatus":
		if e.complexity.RequestMutation.UpdateStatus == nil {
			break
		}

		args, err := ec.field_RequestMutation_updateStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.RequestMutation.UpdateStatus(childComplexity, args["input"].(model.RequestUpdateStatusInput)), true

	case "RequestQuery.id":
		if e.complexity.RequestQuery.ID == nil {
			break
		}

		return e.complexity.RequestQuery.ID(childComplexity), true

	case "RequestQuery.info":
		if e.complexity.RequestQuery.Info == nil {
			break
		}

		args, err := ec.field_RequestQuery_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.RequestQuery.Info(childComplexity, args["input"].(model.RequestInfoInput)), true

	case "RequestQuery.list":
		if e.complexity.RequestQuery.List == nil {
			break
		}

		args, err := ec.field_RequestQuery_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.RequestQuery.List(childComplexity, args["input"].(model.RequestListInput)), true

	case "RequestUpdateStatusOutput.error":
		if e.complexity.RequestUpdateStatusOutput.Error == nil {
			break
		}

		return e.complexity.RequestUpdateStatusOutput.Error(childComplexity), true

	case "RequestUpdateStatusOutput.ok":
		if e.complexity.RequestUpdateStatusOutput.Ok == nil {
			break
		}

		return e.complexity.RequestUpdateStatusOutput.Ok(childComplexity), true

	case "RequestUpdateStatusOutput.record":
		if e.complexity.RequestUpdateStatusOutput.Record == nil {
			break
		}

		return e.complexity.RequestUpdateStatusOutput.Record(childComplexity), true

	case "ServiceType.id":
		if e.complexity.ServiceType.ID == nil {
			break
		}

		return e.complexity.ServiceType.ID(childComplexity), true

	case "ServiceType.name":
		if e.complexity.ServiceType.Name == nil {
			break
		}

		return e.complexity.ServiceType.Name(childComplexity), true

	case "ServiceTypeGetOutput.error":
		if e.complexity.ServiceTypeGetOutput.Error == nil {
			break
		}

		return e.complexity.ServiceTypeGetOutput.Error(childComplexity), true

	case "ServiceTypeGetOutput.ok":
		if e.complexity.ServiceTypeGetOutput.Ok == nil {
			break
		}

		return e.complexity.ServiceTypeGetOutput.Ok(childComplexity), true

	case "ServiceTypeGetOutput.record":
		if e.complexity.ServiceTypeGetOutput.Record == nil {
			break
		}

		return e.complexity.ServiceTypeGetOutput.Record(childComplexity), true

	case "Ship.cubic":
		if e.complexity.Ship.Cubic == nil {
			break
		}

		return e.complexity.Ship.Cubic(childComplexity), true

	case "Ship.flag":
		if e.complexity.Ship.Flag == nil {
			break
		}

		return e.complexity.Ship.Flag(childComplexity), true

	case "Ship.hullHeight":
		if e.complexity.Ship.HullHeight == nil {
			break
		}

		return e.complexity.Ship.HullHeight(childComplexity), true

	case "Ship.hullNumber":
		if e.complexity.Ship.HullNumber == nil {
			break
		}

		return e.complexity.Ship.HullNumber(childComplexity), true

	case "Ship.id":
		if e.complexity.Ship.ID == nil {
			break
		}

		return e.complexity.Ship.ID(childComplexity), true

	case "Ship.length":
		if e.complexity.Ship.Length == nil {
			break
		}

		return e.complexity.Ship.Length(childComplexity), true

	case "Ship.name":
		if e.complexity.Ship.Name == nil {
			break
		}

		return e.complexity.Ship.Name(childComplexity), true

	case "Ship.ownerShipRightsCertificateIds":
		if e.complexity.Ship.OwnerShipRightsCertificateIds == nil {
			break
		}

		return e.complexity.Ship.OwnerShipRightsCertificateIds(childComplexity), true

	case "Ship.projectNumber":
		if e.complexity.Ship.ProjectNumber == nil {
			break
		}

		return e.complexity.Ship.ProjectNumber(childComplexity), true

	case "Ship.shipConfirmParamsCertificateIds":
		if e.complexity.Ship.ShipConfirmParamsCertificateIds == nil {
			break
		}

		return e.complexity.Ship.ShipConfirmParamsCertificateIds(childComplexity), true

	case "Ship.width":
		if e.complexity.Ship.Width == nil {
			break
		}

		return e.complexity.Ship.Width(childComplexity), true

	case "ShipGetOutput.error":
		if e.complexity.ShipGetOutput.Error == nil {
			break
		}

		return e.complexity.ShipGetOutput.Error(childComplexity), true

	case "ShipGetOutput.ok":
		if e.complexity.ShipGetOutput.Ok == nil {
			break
		}

		return e.complexity.ShipGetOutput.Ok(childComplexity), true

	case "ShipGetOutput.record":
		if e.complexity.ShipGetOutput.Record == nil {
			break
		}

		return e.complexity.ShipGetOutput.Record(childComplexity), true

	case "Signatory.actingBasis":
		if e.complexity.Signatory.ActingBasis == nil {
			break
		}

		return e.complexity.Signatory.ActingBasis(childComplexity), true

	case "Signatory.id":
		if e.complexity.Signatory.ID == nil {
			break
		}

		return e.complexity.Signatory.ID(childComplexity), true

	case "Signatory.name":
		if e.complexity.Signatory.Name == nil {
			break
		}

		return e.complexity.Signatory.Name(childComplexity), true

	case "Signatory.warrantDate":
		if e.complexity.Signatory.WarrantDate == nil {
			break
		}

		return e.complexity.Signatory.WarrantDate(childComplexity), true

	case "Signatory.warrantNumber":
		if e.complexity.Signatory.WarrantNumber == nil {
			break
		}

		return e.complexity.Signatory.WarrantNumber(childComplexity), true

	case "SignatoryGetOutput.error":
		if e.complexity.SignatoryGetOutput.Error == nil {
			break
		}

		return e.complexity.SignatoryGetOutput.Error(childComplexity), true

	case "SignatoryGetOutput.ok":
		if e.complexity.SignatoryGetOutput.Ok == nil {
			break
		}

		return e.complexity.SignatoryGetOutput.Ok(childComplexity), true

	case "SignatoryGetOutput.record":
		if e.complexity.SignatoryGetOutput.Record == nil {
			break
		}

		return e.complexity.SignatoryGetOutput.Record(childComplexity), true

	case "UnauthorizedErrorProblem.message":
		if e.complexity.UnauthorizedErrorProblem.Message == nil {
			break
		}

		return e.complexity.UnauthorizedErrorProblem.Message(childComplexity), true

	case "UnauthorizedOutput.error":
		if e.complexity.UnauthorizedOutput.Error == nil {
			break
		}

		return e.complexity.UnauthorizedOutput.Error(childComplexity), true

	case "UnauthorizedOutput.ok":
		if e.complexity.UnauthorizedOutput.Ok == nil {
			break
		}

		return e.complexity.UnauthorizedOutput.Ok(childComplexity), true

	case "UnknowErrorProblem.message":
		if e.complexity.UnknowErrorProblem.Message == nil {
			break
		}

		return e.complexity.UnknowErrorProblem.Message(childComplexity), true

	case "User.access":
		if e.complexity.User.Access == nil {
			break
		}

		return e.complexity.User.Access(childComplexity), true

	case "User.baseRole":
		if e.complexity.User.BaseRole == nil {
			break
		}

		return e.complexity.User.BaseRole(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.fullName":
		if e.complexity.User.FullName == nil {
			break
		}

		return e.complexity.User.FullName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.navigation":
		if e.complexity.User.Navigation == nil {
			break
		}

		return e.complexity.User.Navigation(childComplexity), true

	case "User.serviceTypes":
		if e.complexity.User.ServiceTypes == nil {
			break
		}

		return e.complexity.User.ServiceTypes(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "UserCreateOutput.error":
		if e.complexity.UserCreateOutput.Error == nil {
			break
		}

		return e.complexity.UserCreateOutput.Error(childComplexity), true

	case "UserCreateOutput.ok":
		if e.complexity.UserCreateOutput.Ok == nil {
			break
		}

		return e.complexity.UserCreateOutput.Ok(childComplexity), true

	case "UserCreateOutput.record":
		if e.complexity.UserCreateOutput.Record == nil {
			break
		}

		return e.complexity.UserCreateOutput.Record(childComplexity), true

	case "UserDeleteOutput.error":
		if e.complexity.UserDeleteOutput.Error == nil {
			break
		}

		return e.complexity.UserDeleteOutput.Error(childComplexity), true

	case "UserDeleteOutput.ok":
		if e.complexity.UserDeleteOutput.Ok == nil {
			break
		}

		return e.complexity.UserDeleteOutput.Ok(childComplexity), true

	case "UserFindOutput.error":
		if e.complexity.UserFindOutput.Error == nil {
			break
		}

		return e.complexity.UserFindOutput.Error(childComplexity), true

	case "UserFindOutput.ok":
		if e.complexity.UserFindOutput.Ok == nil {
			break
		}

		return e.complexity.UserFindOutput.Ok(childComplexity), true

	case "UserFindOutput.record":
		if e.complexity.UserFindOutput.Record == nil {
			break
		}

		return e.complexity.UserFindOutput.Record(childComplexity), true

	case "UserGrantRequestAccessOutput.error":
		if e.complexity.UserGrantRequestAccessOutput.Error == nil {
			break
		}

		return e.complexity.UserGrantRequestAccessOutput.Error(childComplexity), true

	case "UserGrantRequestAccessOutput.ok":
		if e.complexity.UserGrantRequestAccessOutput.Ok == nil {
			break
		}

		return e.complexity.UserGrantRequestAccessOutput.Ok(childComplexity), true

	case "UserGrantRequestAccessOutput.record":
		if e.complexity.UserGrantRequestAccessOutput.Record == nil {
			break
		}

		return e.complexity.UserGrantRequestAccessOutput.Record(childComplexity), true

	case "UserListOutput.error":
		if e.complexity.UserListOutput.Error == nil {
			break
		}

		return e.complexity.UserListOutput.Error(childComplexity), true

	case "UserListOutput.ok":
		if e.complexity.UserListOutput.Ok == nil {
			break
		}

		return e.complexity.UserListOutput.Ok(childComplexity), true

	case "UserListOutput.pagination":
		if e.complexity.UserListOutput.Pagination == nil {
			break
		}

		return e.complexity.UserListOutput.Pagination(childComplexity), true

	case "UserListOutput.record":
		if e.complexity.UserListOutput.Record == nil {
			break
		}

		return e.complexity.UserListOutput.Record(childComplexity), true

	case "UserLoginOutput.accessToken":
		if e.complexity.UserLoginOutput.AccessToken == nil {
			break
		}

		return e.complexity.UserLoginOutput.AccessToken(childComplexity), true

	case "UserLoginOutput.error":
		if e.complexity.UserLoginOutput.Error == nil {
			break
		}

		return e.complexity.UserLoginOutput.Error(childComplexity), true

	case "UserLoginOutput.ok":
		if e.complexity.UserLoginOutput.Ok == nil {
			break
		}

		return e.complexity.UserLoginOutput.Ok(childComplexity), true

	case "UserLogoutOutput.error":
		if e.complexity.UserLogoutOutput.Error == nil {
			break
		}

		return e.complexity.UserLogoutOutput.Error(childComplexity), true

	case "UserLogoutOutput.ok":
		if e.complexity.UserLogoutOutput.Ok == nil {
			break
		}

		return e.complexity.UserLogoutOutput.Ok(childComplexity), true

	case "UserMeOutput.error":
		if e.complexity.UserMeOutput.Error == nil {
			break
		}

		return e.complexity.UserMeOutput.Error(childComplexity), true

	case "UserMeOutput.ok":
		if e.complexity.UserMeOutput.Ok == nil {
			break
		}

		return e.complexity.UserMeOutput.Ok(childComplexity), true

	case "UserMeOutput.record":
		if e.complexity.UserMeOutput.Record == nil {
			break
		}

		return e.complexity.UserMeOutput.Record(childComplexity), true

	case "UserMutation.create":
		if e.complexity.UserMutation.Create == nil {
			break
		}

		args, err := ec.field_UserMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Create(childComplexity, args["input"].(model.UserCreateInput)), true

	case "UserMutation.delete":
		if e.complexity.UserMutation.Delete == nil {
			break
		}

		args, err := ec.field_UserMutation_delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Delete(childComplexity, args["id"].(uint)), true

	case "UserMutation.grantRequestAccess":
		if e.complexity.UserMutation.GrantRequestAccess == nil {
			break
		}

		args, err := ec.field_UserMutation_grantRequestAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.GrantRequestAccess(childComplexity, args["input"].(model.UserGrantRequestAccessInput)), true

	case "UserMutation.login":
		if e.complexity.UserMutation.Login == nil {
			break
		}

		args, err := ec.field_UserMutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Login(childComplexity, args["input"].(model.UserLoginInput)), true

	case "UserMutation.logout":
		if e.complexity.UserMutation.Logout == nil {
			break
		}

		return e.complexity.UserMutation.Logout(childComplexity), true

	case "UserMutation.updateMain":
		if e.complexity.UserMutation.UpdateMain == nil {
			break
		}

		args, err := ec.field_UserMutation_updateMain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.UpdateMain(childComplexity, args["input"].(model.UserUpdateMainInput)), true

	case "UserMutation.updateMe":
		if e.complexity.UserMutation.UpdateMe == nil {
			break
		}

		args, err := ec.field_UserMutation_updateMe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.UpdateMe(childComplexity, args["input"].(model.UserUpdateMeInput)), true

	case "UserMutation.updatePassword":
		if e.complexity.UserMutation.UpdatePassword == nil {
			break
		}

		args, err := ec.field_UserMutation_updatePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.UpdatePassword(childComplexity, args["input"].(model.UserUpdatePasswordInput)), true

	case "UserQuery.find":
		if e.complexity.UserQuery.Find == nil {
			break
		}

		args, err := ec.field_UserQuery_find_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserQuery.Find(childComplexity, args["input"].(model.UserFindInput)), true

	case "UserQuery.id":
		if e.complexity.UserQuery.ID == nil {
			break
		}

		return e.complexity.UserQuery.ID(childComplexity), true

	case "UserQuery.list":
		if e.complexity.UserQuery.List == nil {
			break
		}

		args, err := ec.field_UserQuery_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserQuery.List(childComplexity, args["input"].(model.UserListInput)), true

	case "UserQuery.me":
		if e.complexity.UserQuery.Me == nil {
			break
		}

		return e.complexity.UserQuery.Me(childComplexity), true

	case "UserQuery.refresh":
		if e.complexity.UserQuery.Refresh == nil {
			break
		}

		return e.complexity.UserQuery.Refresh(childComplexity), true

	case "UserRefreshOutput.accessToken":
		if e.complexity.UserRefreshOutput.AccessToken == nil {
			break
		}

		return e.complexity.UserRefreshOutput.AccessToken(childComplexity), true

	case "UserRefreshOutput.error":
		if e.complexity.UserRefreshOutput.Error == nil {
			break
		}

		return e.complexity.UserRefreshOutput.Error(childComplexity), true

	case "UserRefreshOutput.ok":
		if e.complexity.UserRefreshOutput.Ok == nil {
			break
		}

		return e.complexity.UserRefreshOutput.Ok(childComplexity), true

	case "UserUpdateMainOutput.error":
		if e.complexity.UserUpdateMainOutput.Error == nil {
			break
		}

		return e.complexity.UserUpdateMainOutput.Error(childComplexity), true

	case "UserUpdateMainOutput.ok":
		if e.complexity.UserUpdateMainOutput.Ok == nil {
			break
		}

		return e.complexity.UserUpdateMainOutput.Ok(childComplexity), true

	case "UserUpdateMainOutput.record":
		if e.complexity.UserUpdateMainOutput.Record == nil {
			break
		}

		return e.complexity.UserUpdateMainOutput.Record(childComplexity), true

	case "UserUpdateMeOutput.error":
		if e.complexity.UserUpdateMeOutput.Error == nil {
			break
		}

		return e.complexity.UserUpdateMeOutput.Error(childComplexity), true

	case "UserUpdateMeOutput.ok":
		if e.complexity.UserUpdateMeOutput.Ok == nil {
			break
		}

		return e.complexity.UserUpdateMeOutput.Ok(childComplexity), true

	case "UserUpdateMeOutput.record":
		if e.complexity.UserUpdateMeOutput.Record == nil {
			break
		}

		return e.complexity.UserUpdateMeOutput.Record(childComplexity), true

	case "UserUpdatePasswordOutput.error":
		if e.complexity.UserUpdatePasswordOutput.Error == nil {
			break
		}

		return e.complexity.UserUpdatePasswordOutput.Error(childComplexity), true

	case "UserUpdatePasswordOutput.ok":
		if e.complexity.UserUpdatePasswordOutput.Ok == nil {
			break
		}

		return e.complexity.UserUpdatePasswordOutput.Ok(childComplexity), true

	case "ValidationErrorProblem.field":
		if e.complexity.ValidationErrorProblem.Field == nil {
			break
		}

		return e.complexity.ValidationErrorProblem.Field(childComplexity), true

	case "ValidationErrorProblem.message":
		if e.complexity.ValidationErrorProblem.Message == nil {
			break
		}

		return e.complexity.ValidationErrorProblem.Message(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "api/_directives.graphql", Input: `directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @hasRole(role: BaseRole!) on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "api/_scalars.graphql", Input: `scalar Time
scalar UInt
`, BuiltIn: false},
	{Name: "api/access/access.graphql", Input: `type Access {
  id: UInt!
  name: String!
}
`, BuiltIn: false},
	{Name: "api/access/accessQuery.graphql", Input: `type AccessQuery

extend type Query {
  access: AccessQuery!
}
`, BuiltIn: false},
	{Name: "api/access/accessQueryFind.graphql", Input: `extend type AccessQuery {
  find(ids: [UInt!]): AccessFindOutput!
}

type AccessFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: [Access!]
}
`, BuiltIn: false},
	{Name: "api/bankAccount/bankAccount.graphql", Input: `type BankAccount {
  id: UInt!
  accountNumber: String!
  correspondentNumber: String!
  bik: String!
  bankName: String!
}

type BankAccountGetOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: BankAccount
}


`, BuiltIn: false},
	{Name: "api/contract/contract.graphql", Input: `type Contract {
  id: UInt!
  serviceRequestID: UInt!
  serviceRequest: RequestInfoOutput @goField(forceResolver: true)
  number: String!
  createdAt: Time!
  contractorID: UInt!
  contractor: ContractorGetOutput @goField(forceResolver: true)
  fileStorageItemID: UInt!
  paymentInvoice: PaymentInvoiceFindOutput @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "api/contract/contractMutation.graphql", Input: `type ContractMutation

extend type Mutation {
  contract: ContractMutation!
}
`, BuiltIn: false},
	{Name: "api/contract/contractMutationCreate.graphql", Input: `extend type ContractMutation {
  create(input: ContractCreateInput!): ContractCreateOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input ContractCreateInput {
  contractNumber: String!
  fileId: UInt!
  requestId: UInt!
  contractorId: UInt!
}

type ContractCreateOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Contract
}
`, BuiltIn: false},
	{Name: "api/contract/contractQuery.graphql", Input: `type ContractQuery {
  id: ID!
}

extend type Query {
  contract: ContractQuery!
}
`, BuiltIn: false},
	{Name: "api/contract/contractQueryFind.graphql", Input: `extend type ContractQuery {
  find(input: ContractFindInput!): ContractFindOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input ContractFindInput {
  contractID: UInt!
}

type ContractFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Contract
}
`, BuiltIn: false},
	{Name: "api/contract/contractQueryList.graphql", Input: `extend type ContractQuery {
  list(input: ContractListInput!): ContactListOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input ContractListInput {
  serviceTypeID: UInt
  filter: PaginationInput!
}

type ContactListOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  pagination: PaginationOutput
  record: [Contract!]
}
`, BuiltIn: false},
	{Name: "api/contractor/contractor.graphql", Input: `type Contractor {
  id: UInt!
  fillName: String!
  shortName: String
  contractorType: ContractorType!
  personId: UInt
  person: PersonFindOutput @goField(forceResolver: true)
}

type ContractorGetOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Contractor
}
`, BuiltIn: false},
	{Name: "api/email/emailQuery.graphql", Input: `type EmailQuery

extend type Query {
  email: EmailQuery!
}
`, BuiltIn: false},
	{Name: "api/email/emailQuerySend.graphql", Input: `extend type EmailQuery {
  send(input: EmailSendInput!): EmailSendOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input EmailSendInput {
  address: String!
  message: String!
}

type EmailSendOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}
`, BuiltIn: false},
	{Name: "api/enum.graphql", Input: `enum BaseRole {
  ADMIN
  HEAD
  WORKER
  ANY
}

enum OrderBy {
  ASC
  DESC
}

enum ContractMediumType {
  electronic
  paper
}

enum RequestStatus {
  pending
  rejected
  accepted
  completed
}

enum ContractorType {
  organization
  person
}
`, BuiltIn: false},
	{Name: "api/file/file.graphql", Input: `type File {
  id: UInt!
  originalFileName: String!
  extension: String!
  mimeType: String!
  size: UInt!
  checksum: String!
  createdAt: Time!
}
`, BuiltIn: false},
	{Name: "api/file/fileMutation.graphql", Input: `type FileMutation

extend type Mutation {
  file: FileMutation!
}
`, BuiltIn: false},
	{Name: "api/file/fileMutationCreate.graphql", Input: `extend type FileMutation {
  create(input: FileCreateInput!): FileCreateOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input FileCreateInput {
  fileName: String!
  extension: String!
  mimeType: String!
  size: UInt!
  checksum: String!
}

type FileCreateOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: File
}
`, BuiltIn: false},
	{Name: "api/input.graphql", Input: `input PaginationInput {
  page: Int = 1
  pageSize: Int = 10
  orderField: String = "id"
  orderBy: OrderBy = ASC
}
`, BuiltIn: false},
	{Name: "api/mutation.graphql", Input: `type Mutation
`, BuiltIn: false},
	{Name: "api/navigation/navigation.graphql", Input: `type Navigation {
  id: UInt!
  path: String!
  title: String!
  description: String
  icon: String
  parentId: UInt!
  order: UInt!
  node: Boolean!
  dev: Boolean!
}
`, BuiltIn: false},
	{Name: "api/navigation/navigationQuery.graphql", Input: `type NavigationQuery

extend type Query {
  navigation: NavigationQuery!
}
`, BuiltIn: false},
	{Name: "api/navigation/navigationQueryFind.graphql", Input: `extend type NavigationQuery {
  find(ids: [UInt!]): NavigationFindOutput!
}

type NavigationFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: [Navigation!]
}
`, BuiltIn: false},
	{Name: "api/organizationContact/organizationContact.graphql", Input: `type OrganizationContact {
  id: UInt!
  phone: String
  email: String
}

type OrganizationContactGetOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: OrganizationContact
}
`, BuiltIn: false},
	{Name: "api/output.graphql", Input: `type PaginationOutput {
  totalItems: Int!
  totalPages: Int!
  page: Int!
  itemsPerPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

interface CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}
`, BuiltIn: false},
	{Name: "api/payment/payment.graphql", Input: `type PaymentInvoice {
  id: UInt!
  contractID: UInt!
  fileID: UInt!
  createdAt: Time!
  confirmation: PaymentConfirmationFindOutput @goField(forceResolver: true)
}

type PaymentConfirmation {
  id: UInt!
  fileID: UInt!
  paymentInvoiceID: UInt!
  proven: Boolean!
  contractID: UInt!
  createdAt: Time!
  updatedAt: Time
}

type PaymentInvoiceFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: [PaymentInvoice!]
}

type PaymentConfirmationFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: PaymentConfirmation
}
`, BuiltIn: false},
	{Name: "api/payment/paymentMutation.graphql", Input: `type PaymentMutation

extend type Mutation {
  payment: PaymentMutation!
}
`, BuiltIn: false},
	{Name: "api/payment/paymentMutationApproveConfirmation.graphql", Input: `extend type PaymentMutation {
  approveConfirmation(input: PaymentConfirmationApproveInput!): PaymentConfirmationApproveOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input PaymentConfirmationApproveInput {
  confirmationID: UInt!
}

type PaymentConfirmationApproveOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: PaymentConfirmation
}
`, BuiltIn: false},
	{Name: "api/payment/paymentMutationCreate.graphql", Input: `extend type PaymentMutation {
  createInvoice(input: PaymentInvoiceCreateInput!): PaymentInvoiceCreateOutput! @goField(forceResolver: true) @hasRole(role: ANY)
  createConfirmation(input: PaymentConfirmationCreateInput!): PaymentConfirmationCreateOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input PaymentInvoiceCreateInput {
  contractID: UInt!
  fileID: UInt!
}

input PaymentConfirmationCreateInput {
  fileID: UInt!
  invoiceID: UInt!
  contractID: UInt!
}

type PaymentInvoiceCreateOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: PaymentInvoice
}

type PaymentConfirmationCreateOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: PaymentConfirmation
}
`, BuiltIn: false},
	{Name: "api/person/person.graphql", Input: `type Person {
  id: UInt!
  email: String
  phone: String
}

type PersonFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Person
}
`, BuiltIn: false},
	{Name: "api/problem.graphql", Input: `interface ProblemInterface {
  message: String!
}

type InternalErrorProblem implements ProblemInterface {
  message: String!
}

type ForbiddenErrorProblem implements ProblemInterface {
  message: String!
}

type UnauthorizedErrorProblem implements ProblemInterface {
  message: String!
}

type UnknowErrorProblem implements ProblemInterface {
  message: String!
}

type ValidationErrorProblem implements ProblemInterface {
  field: String!
  message: String!
}

type InternalErrorOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}

type ForbiddenErrorOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}

type UnauthorizedOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}
`, BuiltIn: false},
	{Name: "api/query.graphql", Input: `type Query`, BuiltIn: false},
	{Name: "api/request/request.graphql", Input: `type Request {
  id: UInt!
  serviceTypeID: UInt!
  serviceType: ServiceTypeGetOutput @goField(forceResolver: true)
  contractorID: UInt!
  contractor: ContractorGetOutput @goField(forceResolver: true)
  organizationContactID: UInt
  organizationContact: OrganizationContactGetOutput @goField(forceResolver: true)
  contractMediumType: ContractMediumType!
  contractFilledTemplateID: UInt
  status: RequestStatus!
  createdAt: Time!
  bankAccountID: UInt
  bankAccount: BankAccountGetOutput @goField(forceResolver: true)
  signatoryID: UInt
  signatory: SignatoryGetOutput @goField(forceResolver: true)
  ships: ShipGetOutput @goField(forceResolver: true)
  contracts: ContactListOutput @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "api/request/requestMutation.graphql", Input: `type RequestMutation

extend type Mutation {
  request: RequestMutation!
}
`, BuiltIn: false},
	{Name: "api/request/requestMutationUpdateStatus.graphql", Input: `extend type RequestMutation {
  updateStatus(input: RequestUpdateStatusInput!): RequestUpdateStatusOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input RequestUpdateStatusInput {
  requestID: UInt!
  newStatus: RequestStatus!
}

type RequestUpdateStatusOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Request
}
`, BuiltIn: false},
	{Name: "api/request/requestQuery.graphql", Input: `type RequestQuery {
  id: ID!
}

extend type Query {
  request: RequestQuery!
}
`, BuiltIn: false},
	{Name: "api/request/requestQueryInfo.graphql", Input: `extend type RequestQuery {
  info(input: RequestInfoInput!): RequestInfoOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input RequestInfoInput {
  requestID: UInt!
}

type RequestInfoOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Request
}
`, BuiltIn: false},
	{Name: "api/request/requestQueryList.graphql", Input: `extend type RequestQuery {
  list(input: RequestListInput!): RequestListOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input RequestListInput {
  serviceID: UInt
  status: RequestStatus
  filter: PaginationInput!
}

type RequestListOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  pagination: PaginationOutput
  record: [Request!]
}
`, BuiltIn: false},
	{Name: "api/serviceType/serviceType.graphql", Input: `type ServiceType {
  id: UInt!
  name: String!
}

type ServiceTypeGetOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: ServiceType
}
`, BuiltIn: false},
	{Name: "api/ship/ship.graphql", Input: `type Ship {
  id: UInt!
  name: String!
  hullNumber: String
  projectNumber: String
  length: Float
  width: Float
  hullHeight: Float
  cubic: Float
  flag: String
  shipConfirmParamsCertificateIds: [UInt!]
  ownerShipRightsCertificateIds: [UInt!]
}

type ShipGetOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: [Ship!]
}
`, BuiltIn: false},
	{Name: "api/signatory/signatory.graphql", Input: `type Signatory {
  id: UInt!
  name: String
  actingBasis: String
  warrantNumber: String
  warrantDate: Time
}

type SignatoryGetOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: Signatory
}
`, BuiltIn: false},
	{Name: "api/user/user.graphql", Input: `type User {
  id: UInt!
  email: String!
  fullName: String!
  baseRole: BaseRole!
  createdAt: Time!
  updatedAt: Time!
  navigation: NavigationFindOutput! @goField(forceResolver: true)
  access: AccessFindOutput! @goField(forceResolver: true)
  serviceTypes: [UInt!]!
}




`, BuiltIn: false},
	{Name: "api/user/userMutation.graphql", Input: `type UserMutation

extend type Mutation {
  user: UserMutation!
}
`, BuiltIn: false},
	{Name: "api/user/userMutationCreate.graphql", Input: `extend type UserMutation {
  create(input: UserCreateInput!): UserCreateOutput! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

input UserCreateInput {
  email: String!
  fullName: String!
  baseRole: BaseRole!
  password: String!
}

type UserCreateOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: User
}


`, BuiltIn: false},
	{Name: "api/user/userMutationDelete.graphql", Input: `extend type UserMutation {
  delete(id: UInt!): UserDeleteOutput! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

type UserDeleteOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}
`, BuiltIn: false},
	{Name: "api/user/userMutationGrantRequestAccess.graphql", Input: `extend type UserMutation {
  grantRequestAccess(input: UserGrantRequestAccessInput!): UserGrantRequestAccessOutput! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

input UserGrantRequestAccessInput {
  userID: UInt!
  serviceTypes: [UInt!]!
}

type UserGrantRequestAccessOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: User
}
`, BuiltIn: false},
	{Name: "api/user/userMutationLogin.graphql", Input: `extend type UserMutation {
  login(input: UserLoginInput!): UserLoginOutput! @goField(forceResolver: true)
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserLoginOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  accessToken: String
}
`, BuiltIn: false},
	{Name: "api/user/userMutationLogout.graphql", Input: `extend type UserMutation {
  logout: UserLogoutOutput! @goField(forceResolver: true)
}

type UserLogoutOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}
`, BuiltIn: false},
	{Name: "api/user/userMutationUpdateMain.graphql", Input: `extend type UserMutation {
  updateMain(input: UserUpdateMainInput!): UserUpdateMainOutput! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

input UserUpdateMainInput {
  fullName: String
  email: String
  baseRole: BaseRole
  userID: UInt!
}

type UserUpdateMainOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: User
}
`, BuiltIn: false},
	{Name: "api/user/userMutationUpdateMe.graphql", Input: `extend type UserMutation {
  updateMe(input: UserUpdateMeInput!): UserUpdateMeOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input UserUpdateMeInput {
  fullName: String
  email: String
}

type UserUpdateMeOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: User
}
`, BuiltIn: false},
	{Name: "api/user/userMutationUpdatePassword.graphql", Input: `extend type UserMutation {
  updatePassword(input: UserUpdatePasswordInput!): UserUpdatePasswordOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}

input UserUpdatePasswordInput {
  id: UInt!
  password: String!
}

type UserUpdatePasswordOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
}
`, BuiltIn: false},
	{Name: "api/user/userQuery.graphql", Input: `type UserQuery {
  id: ID!
}

extend type Query {
  user: UserQuery!
}
`, BuiltIn: false},
	{Name: "api/user/userQueryFind.graphql", Input: `extend type UserQuery {
  find(input: UserFindInput!): UserFindOutput! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

input UserFindInput {
  userID: UInt!
}

type UserFindOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: User
}
`, BuiltIn: false},
	{Name: "api/user/userQueryList.graphql", Input: `extend type UserQuery {
  list(input: UserListInput!): UserListOutput! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

input UserListInput {
  filter: PaginationInput!
}

type UserListOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  pagination: PaginationOutput
  record: [User!]
}
`, BuiltIn: false},
	{Name: "api/user/userQueryMe.graphql", Input: `extend type UserQuery {
  me: UserMeOutput! @goField(forceResolver: true) @hasRole(role: ANY)
}


type UserMeOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  record: User
}
`, BuiltIn: false},
	{Name: "api/user/userQueryRefresh.graphql", Input: `extend type UserQuery {
  refresh: UserRefreshOutput! @goField(forceResolver: true)
}

type UserRefreshOutput implements CoreOutput {
  ok: Boolean!
  error: [ProblemInterface!]
  accessToken: String
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BaseRole
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_AccessQuery_find_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []uint
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalOUInt2ᚕuintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_ContractMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContractCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContractCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_ContractQuery_find_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContractFindInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContractFindInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractFindInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_ContractQuery_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContractListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContractListInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_EmailQuery_send_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EmailSendInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEmailSendInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailSendInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_FileMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FileCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFileCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_NavigationQuery_find_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []uint
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalOUInt2ᚕuintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_PaymentMutation_approveConfirmation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PaymentConfirmationApproveInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaymentConfirmationApproveInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationApproveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_PaymentMutation_createConfirmation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PaymentConfirmationCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaymentConfirmationCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_PaymentMutation_createInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PaymentInvoiceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaymentInvoiceCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_RequestMutation_updateStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RequestUpdateStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRequestUpdateStatusInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestUpdateStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_RequestQuery_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RequestInfoInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRequestInfoInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_RequestQuery_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RequestListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRequestListInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUInt2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_grantRequestAccess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserGrantRequestAccessInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserGrantRequestAccessInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserGrantRequestAccessInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserLoginInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserLoginInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLoginInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_updateMain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserUpdateMainInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserUpdateMainInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMainInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_updateMe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserUpdateMeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserUpdateMeInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_updatePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserUpdatePasswordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserUpdatePasswordInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdatePasswordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_find_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserFindInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserFindInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserFindInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserListInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Access_id(ctx context.Context, field graphql.CollectedField, obj *model.Access) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Access",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Access_name(ctx context.Context, field graphql.CollectedField, obj *model.Access) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Access",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.AccessFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.AccessFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.AccessFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Access)
	fc.Result = res
	return ec.marshalOAccess2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessQuery_find(ctx context.Context, field graphql.CollectedField, obj *model.AccessQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AccessQuery_find_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Find, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AccessFindOutput)
	fc.Result = res
	return ec.marshalNAccessFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccount_id(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccount_accountNumber(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccount_correspondentNumber(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrespondentNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccount_bik(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bik, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccount_bankName(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccountGetOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.BankAccountGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccountGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccountGetOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.BankAccountGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccountGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BankAccountGetOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.BankAccountGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BankAccountGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BankAccount)
	fc.Result = res
	return ec.marshalOBankAccount2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBankAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactListOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ContactListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactListOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ContactListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactListOutput_pagination(ctx context.Context, field graphql.CollectedField, obj *model.ContactListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginationOutput)
	fc.Result = res
	return ec.marshalOPaginationOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactListOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.ContactListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_id(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_serviceRequestID(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_serviceRequest(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().ServiceRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RequestInfoOutput)
	fc.Result = res
	return ec.marshalORequestInfoOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_number(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_contractorID(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_contractor(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().Contractor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractorGetOutput)
	fc.Result = res
	return ec.marshalOContractorGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractorGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_fileStorageItemID(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileStorageItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_paymentInvoice(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().PaymentInvoice(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentInvoiceFindOutput)
	fc.Result = res
	return ec.marshalOPaymentInvoiceFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractCreateOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ContractCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractCreateOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ContractCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractCreateOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.ContractCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ContractFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ContractFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.ContractFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractMutation_create(ctx context.Context, field graphql.CollectedField, obj *model.ContractMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContractMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.ContractMutation().Create(rctx, obj, args["input"].(model.ContractCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ContractCreateOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.ContractCreateOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContractCreateOutput)
	fc.Result = res
	return ec.marshalNContractCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractCreateOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractQuery_id(ctx context.Context, field graphql.CollectedField, obj *model.ContractQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractQuery_find(ctx context.Context, field graphql.CollectedField, obj *model.ContractQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContractQuery_find_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.ContractQuery().Find(rctx, obj, args["input"].(model.ContractFindInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ContractFindOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.ContractFindOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContractFindOutput)
	fc.Result = res
	return ec.marshalNContractFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractQuery_list(ctx context.Context, field graphql.CollectedField, obj *model.ContractQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContractQuery_list_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.ContractQuery().List(rctx, obj, args["input"].(model.ContractListInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ContactListOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.ContactListOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContactListOutput)
	fc.Result = res
	return ec.marshalNContactListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContactListOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Contractor_id(ctx context.Context, field graphql.CollectedField, obj *model.Contractor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contractor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contractor_fillName(ctx context.Context, field graphql.CollectedField, obj *model.Contractor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contractor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FillName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Contractor_shortName(ctx context.Context, field graphql.CollectedField, obj *model.Contractor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contractor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Contractor_contractorType(ctx context.Context, field graphql.CollectedField, obj *model.Contractor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contractor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractorType)
	fc.Result = res
	return ec.marshalNContractorType2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractorType(ctx, field.Selections, res)
}

func (ec *executionContext) _Contractor_personId(ctx context.Context, field graphql.CollectedField, obj *model.Contractor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contractor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOUInt2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contractor_person(ctx context.Context, field graphql.CollectedField, obj *model.Contractor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Contractor",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contractor().Person(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PersonFindOutput)
	fc.Result = res
	return ec.marshalOPersonFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPersonFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractorGetOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ContractorGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractorGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractorGetOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ContractorGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractorGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ContractorGetOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.ContractorGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContractorGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contractor)
	fc.Result = res
	return ec.marshalOContractor2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractor(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailQuery_send(ctx context.Context, field graphql.CollectedField, obj *model.EmailQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_EmailQuery_send_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.EmailQuery().Send(rctx, obj, args["input"].(model.EmailSendInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.EmailSendOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.EmailSendOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmailSendOutput)
	fc.Result = res
	return ec.marshalNEmailSendOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailSendOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailSendOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.EmailSendOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailSendOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailSendOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.EmailSendOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailSendOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _File_originalFileName(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalFileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_extension(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_size(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _File_checksum(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checksum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FileCreateOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.FileCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FileCreateOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.FileCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FileCreateOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.FileCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.File)
	fc.Result = res
	return ec.marshalOFile2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFile(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMutation_create(ctx context.Context, field graphql.CollectedField, obj *model.FileMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_FileMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.FileMutation().Create(rctx, obj, args["input"].(model.FileCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.FileCreateOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.FileCreateOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileCreateOutput)
	fc.Result = res
	return ec.marshalNFileCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileCreateOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _ForbiddenErrorOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ForbiddenErrorOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForbiddenErrorOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ForbiddenErrorOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ForbiddenErrorOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForbiddenErrorOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ForbiddenErrorProblem_message(ctx context.Context, field graphql.CollectedField, obj *model.ForbiddenErrorProblem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForbiddenErrorProblem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalErrorOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.InternalErrorOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalErrorOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalErrorOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.InternalErrorOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalErrorOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalErrorProblem_message(ctx context.Context, field graphql.CollectedField, obj *model.InternalErrorProblem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalErrorProblem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_contract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Contract(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContractMutation)
	fc.Result = res
	return ec.marshalNContractMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_file(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().File(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileMutation)
	fc.Result = res
	return ec.marshalNFileMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_payment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Payment(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentMutation)
	fc.Result = res
	return ec.marshalNPaymentMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_request(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Request(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RequestMutation)
	fc.Result = res
	return ec.marshalNRequestMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().User(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserMutation)
	fc.Result = res
	return ec.marshalNUserMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_id(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_path(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_title(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_description(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_icon(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_parentId(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_order(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_node(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Navigation_dev(ctx context.Context, field graphql.CollectedField, obj *model.Navigation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Navigation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NavigationFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.NavigationFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavigationFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NavigationFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.NavigationFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavigationFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NavigationFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.NavigationFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavigationFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Navigation)
	fc.Result = res
	return ec.marshalONavigation2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NavigationQuery_find(ctx context.Context, field graphql.CollectedField, obj *model.NavigationQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NavigationQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_NavigationQuery_find_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Find, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigationFindOutput)
	fc.Result = res
	return ec.marshalNNavigationFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_phone(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContact_email(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContactGetOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationContactGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContactGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContactGetOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationContactGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContactGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationContactGetOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationContactGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationContactGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationContact)
	fc.Result = res
	return ec.marshalOOrganizationContact2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrganizationContact(ctx, field.Selections, res)
}

func (ec *executionContext) _PaginationOutput_totalItems(ctx context.Context, field graphql.CollectedField, obj *model.PaginationOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaginationOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaginationOutput_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.PaginationOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaginationOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaginationOutput_page(ctx context.Context, field graphql.CollectedField, obj *model.PaginationOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaginationOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaginationOutput_itemsPerPage(ctx context.Context, field graphql.CollectedField, obj *model.PaginationOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaginationOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemsPerPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaginationOutput_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PaginationOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaginationOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaginationOutput_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *model.PaginationOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaginationOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_fileID(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_paymentInvoiceID(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentInvoiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_proven(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proven, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_contractID(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationApproveOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationApproveOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationApproveOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationApproveOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationApproveOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationApproveOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationApproveOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationApproveOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationApproveOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentConfirmation)
	fc.Result = res
	return ec.marshalOPaymentConfirmation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmation(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationCreateOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationCreateOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationCreateOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentConfirmation)
	fc.Result = res
	return ec.marshalOPaymentConfirmation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmation(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConfirmationFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.PaymentConfirmationFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConfirmationFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentConfirmation)
	fc.Result = res
	return ec.marshalOPaymentConfirmation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmation(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoice_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoice_contractID(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoice_fileID(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoice_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoice_confirmation(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoice",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentInvoice().Confirmation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentConfirmationFindOutput)
	fc.Result = res
	return ec.marshalOPaymentConfirmationFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoiceCreateOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoiceCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoiceCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoiceCreateOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoiceCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoiceCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoiceCreateOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoiceCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoiceCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentInvoice)
	fc.Result = res
	return ec.marshalOPaymentInvoice2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoiceFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoiceFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoiceFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoiceFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoiceFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoiceFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentInvoiceFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.PaymentInvoiceFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentInvoiceFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PaymentInvoice)
	fc.Result = res
	return ec.marshalOPaymentInvoice2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMutation_approveConfirmation(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PaymentMutation_approveConfirmation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.PaymentMutation().ApproveConfirmation(rctx, obj, args["input"].(model.PaymentConfirmationApproveInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PaymentConfirmationApproveOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.PaymentConfirmationApproveOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentConfirmationApproveOutput)
	fc.Result = res
	return ec.marshalNPaymentConfirmationApproveOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationApproveOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMutation_createInvoice(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PaymentMutation_createInvoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.PaymentMutation().CreateInvoice(rctx, obj, args["input"].(model.PaymentInvoiceCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PaymentInvoiceCreateOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.PaymentInvoiceCreateOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentInvoiceCreateOutput)
	fc.Result = res
	return ec.marshalNPaymentInvoiceCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceCreateOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMutation_createConfirmation(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PaymentMutation_createConfirmation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.PaymentMutation().CreateConfirmation(rctx, obj, args["input"].(model.PaymentConfirmationCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PaymentConfirmationCreateOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.PaymentConfirmationCreateOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentConfirmationCreateOutput)
	fc.Result = res
	return ec.marshalNPaymentConfirmationCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationCreateOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_id(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_email(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_phone(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.PersonFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.PersonFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.PersonFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_access(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Access(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AccessQuery)
	fc.Result = res
	return ec.marshalNAccessQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_contract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Contract(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContractQuery)
	fc.Result = res
	return ec.marshalNContractQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_email(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Email(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmailQuery)
	fc.Result = res
	return ec.marshalNEmailQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_navigation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Navigation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigationQuery)
	fc.Result = res
	return ec.marshalNNavigationQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_request(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Request(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RequestQuery)
	fc.Result = res
	return ec.marshalNRequestQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserQuery)
	fc.Result = res
	return ec.marshalNUserQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_id(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_serviceTypeID(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_serviceType(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().ServiceType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServiceTypeGetOutput)
	fc.Result = res
	return ec.marshalOServiceTypeGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐServiceTypeGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_contractorID(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_contractor(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().Contractor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractorGetOutput)
	fc.Result = res
	return ec.marshalOContractorGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractorGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_organizationContactID(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationContactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOUInt2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_organizationContact(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().OrganizationContact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationContactGetOutput)
	fc.Result = res
	return ec.marshalOOrganizationContactGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrganizationContactGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_contractMediumType(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractMediumType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractMediumType)
	fc.Result = res
	return ec.marshalNContractMediumType2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractMediumType(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_contractFilledTemplateID(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractFilledTemplateID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOUInt2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_status(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_bankAccountID(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOUInt2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_bankAccount(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().BankAccount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BankAccountGetOutput)
	fc.Result = res
	return ec.marshalOBankAccountGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBankAccountGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_signatoryID(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignatoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOUInt2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_signatory(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().Signatory(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignatoryGetOutput)
	fc.Result = res
	return ec.marshalOSignatoryGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐSignatoryGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_ships(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().Ships(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShipGetOutput)
	fc.Result = res
	return ec.marshalOShipGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐShipGetOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_contracts(ctx context.Context, field graphql.CollectedField, obj *model.Request) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Request",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Request().Contracts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContactListOutput)
	fc.Result = res
	return ec.marshalOContactListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContactListOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestInfoOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.RequestInfoOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestInfoOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestInfoOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.RequestInfoOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestInfoOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestInfoOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.RequestInfoOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestInfoOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Request)
	fc.Result = res
	return ec.marshalORequest2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestListOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.RequestListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestListOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.RequestListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestListOutput_pagination(ctx context.Context, field graphql.CollectedField, obj *model.RequestListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginationOutput)
	fc.Result = res
	return ec.marshalOPaginationOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestListOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.RequestListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Request)
	fc.Result = res
	return ec.marshalORequest2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestMutation_updateStatus(ctx context.Context, field graphql.CollectedField, obj *model.RequestMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_RequestMutation_updateStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.RequestMutation().UpdateStatus(rctx, obj, args["input"].(model.RequestUpdateStatusInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.RequestUpdateStatusOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.RequestUpdateStatusOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RequestUpdateStatusOutput)
	fc.Result = res
	return ec.marshalNRequestUpdateStatusOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestUpdateStatusOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestQuery_id(ctx context.Context, field graphql.CollectedField, obj *model.RequestQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestQuery_info(ctx context.Context, field graphql.CollectedField, obj *model.RequestQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_RequestQuery_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.RequestQuery().Info(rctx, obj, args["input"].(model.RequestInfoInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.RequestInfoOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.RequestInfoOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RequestInfoOutput)
	fc.Result = res
	return ec.marshalNRequestInfoOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestQuery_list(ctx context.Context, field graphql.CollectedField, obj *model.RequestQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_RequestQuery_list_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.RequestQuery().List(rctx, obj, args["input"].(model.RequestListInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.RequestListOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.RequestListOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RequestListOutput)
	fc.Result = res
	return ec.marshalNRequestListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestListOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestUpdateStatusOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.RequestUpdateStatusOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestUpdateStatusOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestUpdateStatusOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.RequestUpdateStatusOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestUpdateStatusOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestUpdateStatusOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.RequestUpdateStatusOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestUpdateStatusOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Request)
	fc.Result = res
	return ec.marshalORequest2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceType_id(ctx context.Context, field graphql.CollectedField, obj *model.ServiceType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServiceType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceType_name(ctx context.Context, field graphql.CollectedField, obj *model.ServiceType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServiceType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceTypeGetOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ServiceTypeGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServiceTypeGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceTypeGetOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ServiceTypeGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServiceTypeGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceTypeGetOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.ServiceTypeGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServiceTypeGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServiceType)
	fc.Result = res
	return ec.marshalOServiceType2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐServiceType(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_id(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_name(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_hullNumber(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HullNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_projectNumber(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_length(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_width(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_hullHeight(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HullHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_cubic(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cubic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_flag(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_shipConfirmParamsCertificateIds(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipConfirmParamsCertificateIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]uint)
	fc.Result = res
	return ec.marshalOUInt2ᚕuintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Ship_ownerShipRightsCertificateIds(ctx context.Context, field graphql.CollectedField, obj *model.Ship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ship",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerShipRightsCertificateIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]uint)
	fc.Result = res
	return ec.marshalOUInt2ᚕuintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ShipGetOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.ShipGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShipGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ShipGetOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.ShipGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShipGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ShipGetOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.ShipGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShipGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Ship)
	fc.Result = res
	return ec.marshalOShip2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐShipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Signatory_id(ctx context.Context, field graphql.CollectedField, obj *model.Signatory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signatory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Signatory_name(ctx context.Context, field graphql.CollectedField, obj *model.Signatory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signatory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Signatory_actingBasis(ctx context.Context, field graphql.CollectedField, obj *model.Signatory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signatory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActingBasis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Signatory_warrantNumber(ctx context.Context, field graphql.CollectedField, obj *model.Signatory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signatory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WarrantNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Signatory_warrantDate(ctx context.Context, field graphql.CollectedField, obj *model.Signatory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signatory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WarrantDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SignatoryGetOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.SignatoryGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SignatoryGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SignatoryGetOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.SignatoryGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SignatoryGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SignatoryGetOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.SignatoryGetOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SignatoryGetOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Signatory)
	fc.Result = res
	return ec.marshalOSignatory2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐSignatory(ctx, field.Selections, res)
}

func (ec *executionContext) _UnauthorizedErrorProblem_message(ctx context.Context, field graphql.CollectedField, obj *model.UnauthorizedErrorProblem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UnauthorizedErrorProblem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UnauthorizedOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UnauthorizedOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UnauthorizedOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UnauthorizedOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UnauthorizedOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UnauthorizedOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UnknowErrorProblem_message(ctx context.Context, field graphql.CollectedField, obj *model.UnknowErrorProblem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UnknowErrorProblem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_fullName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_baseRole(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BaseRole)
	fc.Result = res
	return ec.marshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_navigation(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Navigation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigationFindOutput)
	fc.Result = res
	return ec.marshalNNavigationFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _User_access(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Access(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AccessFindOutput)
	fc.Result = res
	return ec.marshalNAccessFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _User_serviceTypes(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]uint)
	fc.Result = res
	return ec.marshalNUInt2ᚕuintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCreateOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCreateOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCreateOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserCreateOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCreateOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeleteOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserDeleteOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeleteOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeleteOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserDeleteOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeleteOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserFindOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserFindOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserFindOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserFindOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserFindOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserGrantRequestAccessOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserGrantRequestAccessOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserGrantRequestAccessOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserGrantRequestAccessOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserGrantRequestAccessOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserGrantRequestAccessOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserGrantRequestAccessOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserGrantRequestAccessOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserGrantRequestAccessOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserListOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserListOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserListOutput_pagination(ctx context.Context, field graphql.CollectedField, obj *model.UserListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginationOutput)
	fc.Result = res
	return ec.marshalOPaginationOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserListOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserListOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserListOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserLoginOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLoginOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserLoginOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLoginOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginOutput_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.UserLoginOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLoginOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLogoutOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserLogoutOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLogoutOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLogoutOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserLogoutOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLogoutOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMeOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserMeOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMeOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMeOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserMeOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMeOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMeOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserMeOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMeOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_create(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().Create(rctx, obj, args["input"].(model.UserCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserCreateOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserCreateOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserCreateOutput)
	fc.Result = res
	return ec.marshalNUserCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserCreateOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_delete(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_delete_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().Delete(rctx, obj, args["id"].(uint))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserDeleteOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserDeleteOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserDeleteOutput)
	fc.Result = res
	return ec.marshalNUserDeleteOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserDeleteOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_grantRequestAccess(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_grantRequestAccess_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().GrantRequestAccess(rctx, obj, args["input"].(model.UserGrantRequestAccessInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserGrantRequestAccessOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserGrantRequestAccessOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserGrantRequestAccessOutput)
	fc.Result = res
	return ec.marshalNUserGrantRequestAccessOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserGrantRequestAccessOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_login(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserMutation().Login(rctx, obj, args["input"].(model.UserLoginInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserLoginOutput)
	fc.Result = res
	return ec.marshalNUserLoginOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLoginOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_logout(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserMutation().Logout(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserLogoutOutput)
	fc.Result = res
	return ec.marshalNUserLogoutOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLogoutOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_updateMain(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_updateMain_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().UpdateMain(rctx, obj, args["input"].(model.UserUpdateMainInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserUpdateMainOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserUpdateMainOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserUpdateMainOutput)
	fc.Result = res
	return ec.marshalNUserUpdateMainOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMainOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_updateMe(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_updateMe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().UpdateMe(rctx, obj, args["input"].(model.UserUpdateMeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserUpdateMeOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserUpdateMeOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserUpdateMeOutput)
	fc.Result = res
	return ec.marshalNUserUpdateMeOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMeOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_updatePassword(ctx context.Context, field graphql.CollectedField, obj *model.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_updatePassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().UpdatePassword(rctx, obj, args["input"].(model.UserUpdatePasswordInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserUpdatePasswordOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserUpdatePasswordOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserUpdatePasswordOutput)
	fc.Result = res
	return ec.marshalNUserUpdatePasswordOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdatePasswordOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_find(ctx context.Context, field graphql.CollectedField, obj *model.UserQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserQuery_find_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserQuery().Find(rctx, obj, args["input"].(model.UserFindInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserFindOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserFindOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserFindOutput)
	fc.Result = res
	return ec.marshalNUserFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserFindOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_list(ctx context.Context, field graphql.CollectedField, obj *model.UserQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserQuery_list_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserQuery().List(rctx, obj, args["input"].(model.UserListInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserListOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserListOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserListOutput)
	fc.Result = res
	return ec.marshalNUserListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserListOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_me(ctx context.Context, field graphql.CollectedField, obj *model.UserQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserQuery().Me(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, "ANY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserMeOutput); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/marki-eriker/kim-worker-go/internal/gql/model.UserMeOutput`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserMeOutput)
	fc.Result = res
	return ec.marshalNUserMeOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserMeOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_refresh(ctx context.Context, field graphql.CollectedField, obj *model.UserQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserQuery().Refresh(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserRefreshOutput)
	fc.Result = res
	return ec.marshalNUserRefreshOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserRefreshOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRefreshOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserRefreshOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserRefreshOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRefreshOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserRefreshOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserRefreshOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRefreshOutput_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.UserRefreshOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserRefreshOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdateMainOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdateMainOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdateMainOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdateMainOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdateMainOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdateMainOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdateMainOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdateMainOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdateMainOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdateMeOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdateMeOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdateMeOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdateMeOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdateMeOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdateMeOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdateMeOutput_record(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdateMeOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdateMeOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdatePasswordOutput_ok(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdatePasswordOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdatePasswordOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserUpdatePasswordOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.UserUpdatePasswordOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserUpdatePasswordOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ProblemInterface)
	fc.Result = res
	return ec.marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationErrorProblem_field(ctx context.Context, field graphql.CollectedField, obj *model.ValidationErrorProblem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationErrorProblem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationErrorProblem_message(ctx context.Context, field graphql.CollectedField, obj *model.ValidationErrorProblem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationErrorProblem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputContractCreateInput(ctx context.Context, obj interface{}) (model.ContractCreateInput, error) {
	var it model.ContractCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contractNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumber"))
			it.ContractNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileId"))
			it.FileID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "requestId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestId"))
			it.RequestID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorId"))
			it.ContractorID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractFindInput(ctx context.Context, obj interface{}) (model.ContractFindInput, error) {
	var it model.ContractFindInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contractID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractID"))
			it.ContractID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractListInput(ctx context.Context, obj interface{}) (model.ContractListInput, error) {
	var it model.ContractListInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "serviceTypeID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceTypeID"))
			it.ServiceTypeID, err = ec.unmarshalOUInt2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNPaginationInput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailSendInput(ctx context.Context, obj interface{}) (model.EmailSendInput, error) {
	var it model.EmailSendInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFileCreateInput(ctx context.Context, obj interface{}) (model.FileCreateInput, error) {
	var it model.FileCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			it.FileName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "extension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extension"))
			it.Extension, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mimeType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeType"))
			it.MimeType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "checksum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
			it.Checksum, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (model.PaginationInput, error) {
	var it model.PaginationInput
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["pageSize"]; !present {
		asMap["pageSize"] = 10
	}
	if _, present := asMap["orderField"]; !present {
		asMap["orderField"] = "id"
	}
	if _, present := asMap["orderBy"]; !present {
		asMap["orderBy"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderField":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderField"))
			it.OrderField, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
			it.OrderBy, err = ec.unmarshalOOrderBy2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentConfirmationApproveInput(ctx context.Context, obj interface{}) (model.PaymentConfirmationApproveInput, error) {
	var it model.PaymentConfirmationApproveInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirmationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmationID"))
			it.ConfirmationID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentConfirmationCreateInput(ctx context.Context, obj interface{}) (model.PaymentConfirmationCreateInput, error) {
	var it model.PaymentConfirmationCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fileID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileID"))
			it.FileID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceID"))
			it.InvoiceID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractID"))
			it.ContractID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentInvoiceCreateInput(ctx context.Context, obj interface{}) (model.PaymentInvoiceCreateInput, error) {
	var it model.PaymentInvoiceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contractID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractID"))
			it.ContractID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileID"))
			it.FileID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestInfoInput(ctx context.Context, obj interface{}) (model.RequestInfoInput, error) {
	var it model.RequestInfoInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "requestID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestID"))
			it.RequestID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestListInput(ctx context.Context, obj interface{}) (model.RequestListInput, error) {
	var it model.RequestListInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "serviceID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
			it.ServiceID, err = ec.unmarshalOUInt2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNPaginationInput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestUpdateStatusInput(ctx context.Context, obj interface{}) (model.RequestUpdateStatusInput, error) {
	var it model.RequestUpdateStatusInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "requestID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestID"))
			it.RequestID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "newStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newStatus"))
			it.NewStatus, err = ec.unmarshalNRequestStatus2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCreateInput(ctx context.Context, obj interface{}) (model.UserCreateInput, error) {
	var it model.UserCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "baseRole":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseRole"))
			it.BaseRole, err = ec.unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFindInput(ctx context.Context, obj interface{}) (model.UserFindInput, error) {
	var it model.UserFindInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserGrantRequestAccessInput(ctx context.Context, obj interface{}) (model.UserGrantRequestAccessInput, error) {
	var it model.UserGrantRequestAccessInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "serviceTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceTypes"))
			it.ServiceTypes, err = ec.unmarshalNUInt2ᚕuintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserListInput(ctx context.Context, obj interface{}) (model.UserListInput, error) {
	var it model.UserListInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNPaginationInput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginInput(ctx context.Context, obj interface{}) (model.UserLoginInput, error) {
	var it model.UserLoginInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateMainInput(ctx context.Context, obj interface{}) (model.UserUpdateMainInput, error) {
	var it model.UserUpdateMainInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "baseRole":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseRole"))
			it.BaseRole, err = ec.unmarshalOBaseRole2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateMeInput(ctx context.Context, obj interface{}) (model.UserUpdateMeInput, error) {
	var it model.UserUpdateMeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdatePasswordInput(ctx context.Context, obj interface{}) (model.UserUpdatePasswordInput, error) {
	var it model.UserUpdatePasswordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNUInt2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _CoreOutput(ctx context.Context, sel ast.SelectionSet, obj model.CoreOutput) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.AccessFindOutput:
		return ec._AccessFindOutput(ctx, sel, &obj)
	case *model.AccessFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccessFindOutput(ctx, sel, obj)
	case model.BankAccountGetOutput:
		return ec._BankAccountGetOutput(ctx, sel, &obj)
	case *model.BankAccountGetOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._BankAccountGetOutput(ctx, sel, obj)
	case model.ContractCreateOutput:
		return ec._ContractCreateOutput(ctx, sel, &obj)
	case *model.ContractCreateOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContractCreateOutput(ctx, sel, obj)
	case model.ContractFindOutput:
		return ec._ContractFindOutput(ctx, sel, &obj)
	case *model.ContractFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContractFindOutput(ctx, sel, obj)
	case model.ContactListOutput:
		return ec._ContactListOutput(ctx, sel, &obj)
	case *model.ContactListOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactListOutput(ctx, sel, obj)
	case model.ContractorGetOutput:
		return ec._ContractorGetOutput(ctx, sel, &obj)
	case *model.ContractorGetOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContractorGetOutput(ctx, sel, obj)
	case model.EmailSendOutput:
		return ec._EmailSendOutput(ctx, sel, &obj)
	case *model.EmailSendOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._EmailSendOutput(ctx, sel, obj)
	case model.FileCreateOutput:
		return ec._FileCreateOutput(ctx, sel, &obj)
	case *model.FileCreateOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._FileCreateOutput(ctx, sel, obj)
	case model.NavigationFindOutput:
		return ec._NavigationFindOutput(ctx, sel, &obj)
	case *model.NavigationFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._NavigationFindOutput(ctx, sel, obj)
	case model.OrganizationContactGetOutput:
		return ec._OrganizationContactGetOutput(ctx, sel, &obj)
	case *model.OrganizationContactGetOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationContactGetOutput(ctx, sel, obj)
	case model.PaymentInvoiceFindOutput:
		return ec._PaymentInvoiceFindOutput(ctx, sel, &obj)
	case *model.PaymentInvoiceFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._PaymentInvoiceFindOutput(ctx, sel, obj)
	case model.PaymentConfirmationFindOutput:
		return ec._PaymentConfirmationFindOutput(ctx, sel, &obj)
	case *model.PaymentConfirmationFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._PaymentConfirmationFindOutput(ctx, sel, obj)
	case model.PaymentConfirmationApproveOutput:
		return ec._PaymentConfirmationApproveOutput(ctx, sel, &obj)
	case *model.PaymentConfirmationApproveOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._PaymentConfirmationApproveOutput(ctx, sel, obj)
	case model.PaymentInvoiceCreateOutput:
		return ec._PaymentInvoiceCreateOutput(ctx, sel, &obj)
	case *model.PaymentInvoiceCreateOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._PaymentInvoiceCreateOutput(ctx, sel, obj)
	case model.PaymentConfirmationCreateOutput:
		return ec._PaymentConfirmationCreateOutput(ctx, sel, &obj)
	case *model.PaymentConfirmationCreateOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._PaymentConfirmationCreateOutput(ctx, sel, obj)
	case model.PersonFindOutput:
		return ec._PersonFindOutput(ctx, sel, &obj)
	case *model.PersonFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._PersonFindOutput(ctx, sel, obj)
	case model.InternalErrorOutput:
		return ec._InternalErrorOutput(ctx, sel, &obj)
	case *model.InternalErrorOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._InternalErrorOutput(ctx, sel, obj)
	case model.ForbiddenErrorOutput:
		return ec._ForbiddenErrorOutput(ctx, sel, &obj)
	case *model.ForbiddenErrorOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ForbiddenErrorOutput(ctx, sel, obj)
	case model.UnauthorizedOutput:
		return ec._UnauthorizedOutput(ctx, sel, &obj)
	case *model.UnauthorizedOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UnauthorizedOutput(ctx, sel, obj)
	case model.RequestUpdateStatusOutput:
		return ec._RequestUpdateStatusOutput(ctx, sel, &obj)
	case *model.RequestUpdateStatusOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._RequestUpdateStatusOutput(ctx, sel, obj)
	case model.RequestInfoOutput:
		return ec._RequestInfoOutput(ctx, sel, &obj)
	case *model.RequestInfoOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._RequestInfoOutput(ctx, sel, obj)
	case model.RequestListOutput:
		return ec._RequestListOutput(ctx, sel, &obj)
	case *model.RequestListOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._RequestListOutput(ctx, sel, obj)
	case model.ServiceTypeGetOutput:
		return ec._ServiceTypeGetOutput(ctx, sel, &obj)
	case *model.ServiceTypeGetOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceTypeGetOutput(ctx, sel, obj)
	case model.ShipGetOutput:
		return ec._ShipGetOutput(ctx, sel, &obj)
	case *model.ShipGetOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShipGetOutput(ctx, sel, obj)
	case model.SignatoryGetOutput:
		return ec._SignatoryGetOutput(ctx, sel, &obj)
	case *model.SignatoryGetOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._SignatoryGetOutput(ctx, sel, obj)
	case model.UserCreateOutput:
		return ec._UserCreateOutput(ctx, sel, &obj)
	case *model.UserCreateOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserCreateOutput(ctx, sel, obj)
	case model.UserDeleteOutput:
		return ec._UserDeleteOutput(ctx, sel, &obj)
	case *model.UserDeleteOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserDeleteOutput(ctx, sel, obj)
	case model.UserGrantRequestAccessOutput:
		return ec._UserGrantRequestAccessOutput(ctx, sel, &obj)
	case *model.UserGrantRequestAccessOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserGrantRequestAccessOutput(ctx, sel, obj)
	case model.UserLoginOutput:
		return ec._UserLoginOutput(ctx, sel, &obj)
	case *model.UserLoginOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserLoginOutput(ctx, sel, obj)
	case model.UserLogoutOutput:
		return ec._UserLogoutOutput(ctx, sel, &obj)
	case *model.UserLogoutOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserLogoutOutput(ctx, sel, obj)
	case model.UserUpdateMainOutput:
		return ec._UserUpdateMainOutput(ctx, sel, &obj)
	case *model.UserUpdateMainOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserUpdateMainOutput(ctx, sel, obj)
	case model.UserUpdateMeOutput:
		return ec._UserUpdateMeOutput(ctx, sel, &obj)
	case *model.UserUpdateMeOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserUpdateMeOutput(ctx, sel, obj)
	case model.UserUpdatePasswordOutput:
		return ec._UserUpdatePasswordOutput(ctx, sel, &obj)
	case *model.UserUpdatePasswordOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserUpdatePasswordOutput(ctx, sel, obj)
	case model.UserFindOutput:
		return ec._UserFindOutput(ctx, sel, &obj)
	case *model.UserFindOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserFindOutput(ctx, sel, obj)
	case model.UserListOutput:
		return ec._UserListOutput(ctx, sel, &obj)
	case *model.UserListOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserListOutput(ctx, sel, obj)
	case model.UserMeOutput:
		return ec._UserMeOutput(ctx, sel, &obj)
	case *model.UserMeOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserMeOutput(ctx, sel, obj)
	case model.UserRefreshOutput:
		return ec._UserRefreshOutput(ctx, sel, &obj)
	case *model.UserRefreshOutput:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserRefreshOutput(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ProblemInterface(ctx context.Context, sel ast.SelectionSet, obj model.ProblemInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.InternalErrorProblem:
		return ec._InternalErrorProblem(ctx, sel, &obj)
	case *model.InternalErrorProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._InternalErrorProblem(ctx, sel, obj)
	case model.ForbiddenErrorProblem:
		return ec._ForbiddenErrorProblem(ctx, sel, &obj)
	case *model.ForbiddenErrorProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ForbiddenErrorProblem(ctx, sel, obj)
	case model.UnauthorizedErrorProblem:
		return ec._UnauthorizedErrorProblem(ctx, sel, &obj)
	case *model.UnauthorizedErrorProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._UnauthorizedErrorProblem(ctx, sel, obj)
	case model.UnknowErrorProblem:
		return ec._UnknowErrorProblem(ctx, sel, &obj)
	case *model.UnknowErrorProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._UnknowErrorProblem(ctx, sel, obj)
	case model.ValidationErrorProblem:
		return ec._ValidationErrorProblem(ctx, sel, &obj)
	case *model.ValidationErrorProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ValidationErrorProblem(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessImplementors = []string{"Access"}

func (ec *executionContext) _Access(ctx context.Context, sel ast.SelectionSet, obj *model.Access) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Access")
		case "id":
			out.Values[i] = ec._Access_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Access_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accessFindOutputImplementors = []string{"AccessFindOutput", "CoreOutput"}

func (ec *executionContext) _AccessFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.AccessFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessFindOutput")
		case "ok":
			out.Values[i] = ec._AccessFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._AccessFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._AccessFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accessQueryImplementors = []string{"AccessQuery"}

func (ec *executionContext) _AccessQuery(ctx context.Context, sel ast.SelectionSet, obj *model.AccessQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessQuery")
		case "find":
			out.Values[i] = ec._AccessQuery_find(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bankAccountImplementors = []string{"BankAccount"}

func (ec *executionContext) _BankAccount(ctx context.Context, sel ast.SelectionSet, obj *model.BankAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bankAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BankAccount")
		case "id":
			out.Values[i] = ec._BankAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountNumber":
			out.Values[i] = ec._BankAccount_accountNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "correspondentNumber":
			out.Values[i] = ec._BankAccount_correspondentNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bik":
			out.Values[i] = ec._BankAccount_bik(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bankName":
			out.Values[i] = ec._BankAccount_bankName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bankAccountGetOutputImplementors = []string{"BankAccountGetOutput", "CoreOutput"}

func (ec *executionContext) _BankAccountGetOutput(ctx context.Context, sel ast.SelectionSet, obj *model.BankAccountGetOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bankAccountGetOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BankAccountGetOutput")
		case "ok":
			out.Values[i] = ec._BankAccountGetOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._BankAccountGetOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._BankAccountGetOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contactListOutputImplementors = []string{"ContactListOutput", "CoreOutput"}

func (ec *executionContext) _ContactListOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ContactListOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactListOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactListOutput")
		case "ok":
			out.Values[i] = ec._ContactListOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ContactListOutput_error(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ContactListOutput_pagination(ctx, field, obj)
		case "record":
			out.Values[i] = ec._ContactListOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractImplementors = []string{"Contract"}

func (ec *executionContext) _Contract(ctx context.Context, sel ast.SelectionSet, obj *model.Contract) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contract")
		case "id":
			out.Values[i] = ec._Contract_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "serviceRequestID":
			out.Values[i] = ec._Contract_serviceRequestID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "serviceRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_serviceRequest(ctx, field, obj)
				return res
			})
		case "number":
			out.Values[i] = ec._Contract_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Contract_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contractorID":
			out.Values[i] = ec._Contract_contractorID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contractor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_contractor(ctx, field, obj)
				return res
			})
		case "fileStorageItemID":
			out.Values[i] = ec._Contract_fileStorageItemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "paymentInvoice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_paymentInvoice(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractCreateOutputImplementors = []string{"ContractCreateOutput", "CoreOutput"}

func (ec *executionContext) _ContractCreateOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ContractCreateOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractCreateOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractCreateOutput")
		case "ok":
			out.Values[i] = ec._ContractCreateOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ContractCreateOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._ContractCreateOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractFindOutputImplementors = []string{"ContractFindOutput", "CoreOutput"}

func (ec *executionContext) _ContractFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ContractFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractFindOutput")
		case "ok":
			out.Values[i] = ec._ContractFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ContractFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._ContractFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractMutationImplementors = []string{"ContractMutation"}

func (ec *executionContext) _ContractMutation(ctx context.Context, sel ast.SelectionSet, obj *model.ContractMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ContractMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractQueryImplementors = []string{"ContractQuery"}

func (ec *executionContext) _ContractQuery(ctx context.Context, sel ast.SelectionSet, obj *model.ContractQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractQuery")
		case "id":
			out.Values[i] = ec._ContractQuery_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "find":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ContractQuery_find(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "list":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ContractQuery_list(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractorImplementors = []string{"Contractor"}

func (ec *executionContext) _Contractor(ctx context.Context, sel ast.SelectionSet, obj *model.Contractor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contractor")
		case "id":
			out.Values[i] = ec._Contractor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fillName":
			out.Values[i] = ec._Contractor_fillName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "shortName":
			out.Values[i] = ec._Contractor_shortName(ctx, field, obj)
		case "contractorType":
			out.Values[i] = ec._Contractor_contractorType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "personId":
			out.Values[i] = ec._Contractor_personId(ctx, field, obj)
		case "person":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contractor_person(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractorGetOutputImplementors = []string{"ContractorGetOutput", "CoreOutput"}

func (ec *executionContext) _ContractorGetOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ContractorGetOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractorGetOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractorGetOutput")
		case "ok":
			out.Values[i] = ec._ContractorGetOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ContractorGetOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._ContractorGetOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailQueryImplementors = []string{"EmailQuery"}

func (ec *executionContext) _EmailQuery(ctx context.Context, sel ast.SelectionSet, obj *model.EmailQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailQuery")
		case "send":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmailQuery_send(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailSendOutputImplementors = []string{"EmailSendOutput", "CoreOutput"}

func (ec *executionContext) _EmailSendOutput(ctx context.Context, sel ast.SelectionSet, obj *model.EmailSendOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailSendOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailSendOutput")
		case "ok":
			out.Values[i] = ec._EmailSendOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._EmailSendOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileImplementors = []string{"File"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *model.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			out.Values[i] = ec._File_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "originalFileName":
			out.Values[i] = ec._File_originalFileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "extension":
			out.Values[i] = ec._File_extension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":
			out.Values[i] = ec._File_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._File_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checksum":
			out.Values[i] = ec._File_checksum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._File_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileCreateOutputImplementors = []string{"FileCreateOutput", "CoreOutput"}

func (ec *executionContext) _FileCreateOutput(ctx context.Context, sel ast.SelectionSet, obj *model.FileCreateOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileCreateOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileCreateOutput")
		case "ok":
			out.Values[i] = ec._FileCreateOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._FileCreateOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._FileCreateOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileMutationImplementors = []string{"FileMutation"}

func (ec *executionContext) _FileMutation(ctx context.Context, sel ast.SelectionSet, obj *model.FileMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FileMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forbiddenErrorOutputImplementors = []string{"ForbiddenErrorOutput", "CoreOutput"}

func (ec *executionContext) _ForbiddenErrorOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ForbiddenErrorOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forbiddenErrorOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForbiddenErrorOutput")
		case "ok":
			out.Values[i] = ec._ForbiddenErrorOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ForbiddenErrorOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forbiddenErrorProblemImplementors = []string{"ForbiddenErrorProblem", "ProblemInterface"}

func (ec *executionContext) _ForbiddenErrorProblem(ctx context.Context, sel ast.SelectionSet, obj *model.ForbiddenErrorProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forbiddenErrorProblemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForbiddenErrorProblem")
		case "message":
			out.Values[i] = ec._ForbiddenErrorProblem_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var internalErrorOutputImplementors = []string{"InternalErrorOutput", "CoreOutput"}

func (ec *executionContext) _InternalErrorOutput(ctx context.Context, sel ast.SelectionSet, obj *model.InternalErrorOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalErrorOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalErrorOutput")
		case "ok":
			out.Values[i] = ec._InternalErrorOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._InternalErrorOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var internalErrorProblemImplementors = []string{"InternalErrorProblem", "ProblemInterface"}

func (ec *executionContext) _InternalErrorProblem(ctx context.Context, sel ast.SelectionSet, obj *model.InternalErrorProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalErrorProblemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalErrorProblem")
		case "message":
			out.Values[i] = ec._InternalErrorProblem_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "contract":
			out.Values[i] = ec._Mutation_contract(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file":
			out.Values[i] = ec._Mutation_file(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment":
			out.Values[i] = ec._Mutation_payment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "request":
			out.Values[i] = ec._Mutation_request(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Mutation_user(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navigationImplementors = []string{"Navigation"}

func (ec *executionContext) _Navigation(ctx context.Context, sel ast.SelectionSet, obj *model.Navigation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navigationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Navigation")
		case "id":
			out.Values[i] = ec._Navigation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Navigation_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Navigation_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Navigation_description(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Navigation_icon(ctx, field, obj)
		case "parentId":
			out.Values[i] = ec._Navigation_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "order":
			out.Values[i] = ec._Navigation_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._Navigation_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dev":
			out.Values[i] = ec._Navigation_dev(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navigationFindOutputImplementors = []string{"NavigationFindOutput", "CoreOutput"}

func (ec *executionContext) _NavigationFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.NavigationFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navigationFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NavigationFindOutput")
		case "ok":
			out.Values[i] = ec._NavigationFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._NavigationFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._NavigationFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navigationQueryImplementors = []string{"NavigationQuery"}

func (ec *executionContext) _NavigationQuery(ctx context.Context, sel ast.SelectionSet, obj *model.NavigationQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navigationQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NavigationQuery")
		case "find":
			out.Values[i] = ec._NavigationQuery_find(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationContactImplementors = []string{"OrganizationContact"}

func (ec *executionContext) _OrganizationContact(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationContactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationContact")
		case "id":
			out.Values[i] = ec._OrganizationContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":
			out.Values[i] = ec._OrganizationContact_phone(ctx, field, obj)
		case "email":
			out.Values[i] = ec._OrganizationContact_email(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationContactGetOutputImplementors = []string{"OrganizationContactGetOutput", "CoreOutput"}

func (ec *executionContext) _OrganizationContactGetOutput(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationContactGetOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationContactGetOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationContactGetOutput")
		case "ok":
			out.Values[i] = ec._OrganizationContactGetOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._OrganizationContactGetOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._OrganizationContactGetOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginationOutputImplementors = []string{"PaginationOutput"}

func (ec *executionContext) _PaginationOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PaginationOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginationOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginationOutput")
		case "totalItems":
			out.Values[i] = ec._PaginationOutput_totalItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalPages":
			out.Values[i] = ec._PaginationOutput_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "page":
			out.Values[i] = ec._PaginationOutput_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "itemsPerPage":
			out.Values[i] = ec._PaginationOutput_itemsPerPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._PaginationOutput_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PaginationOutput_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentConfirmationImplementors = []string{"PaymentConfirmation"}

func (ec *executionContext) _PaymentConfirmation(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentConfirmation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentConfirmationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentConfirmation")
		case "id":
			out.Values[i] = ec._PaymentConfirmation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileID":
			out.Values[i] = ec._PaymentConfirmation_fileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentInvoiceID":
			out.Values[i] = ec._PaymentConfirmation_paymentInvoiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "proven":
			out.Values[i] = ec._PaymentConfirmation_proven(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contractID":
			out.Values[i] = ec._PaymentConfirmation_contractID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._PaymentConfirmation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._PaymentConfirmation_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentConfirmationApproveOutputImplementors = []string{"PaymentConfirmationApproveOutput", "CoreOutput"}

func (ec *executionContext) _PaymentConfirmationApproveOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentConfirmationApproveOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentConfirmationApproveOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentConfirmationApproveOutput")
		case "ok":
			out.Values[i] = ec._PaymentConfirmationApproveOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._PaymentConfirmationApproveOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._PaymentConfirmationApproveOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentConfirmationCreateOutputImplementors = []string{"PaymentConfirmationCreateOutput", "CoreOutput"}

func (ec *executionContext) _PaymentConfirmationCreateOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentConfirmationCreateOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentConfirmationCreateOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentConfirmationCreateOutput")
		case "ok":
			out.Values[i] = ec._PaymentConfirmationCreateOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._PaymentConfirmationCreateOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._PaymentConfirmationCreateOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentConfirmationFindOutputImplementors = []string{"PaymentConfirmationFindOutput", "CoreOutput"}

func (ec *executionContext) _PaymentConfirmationFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentConfirmationFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentConfirmationFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentConfirmationFindOutput")
		case "ok":
			out.Values[i] = ec._PaymentConfirmationFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._PaymentConfirmationFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._PaymentConfirmationFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentInvoiceImplementors = []string{"PaymentInvoice"}

func (ec *executionContext) _PaymentInvoice(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentInvoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentInvoiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentInvoice")
		case "id":
			out.Values[i] = ec._PaymentInvoice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contractID":
			out.Values[i] = ec._PaymentInvoice_contractID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileID":
			out.Values[i] = ec._PaymentInvoice_fileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PaymentInvoice_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "confirmation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentInvoice_confirmation(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentInvoiceCreateOutputImplementors = []string{"PaymentInvoiceCreateOutput", "CoreOutput"}

func (ec *executionContext) _PaymentInvoiceCreateOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentInvoiceCreateOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentInvoiceCreateOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentInvoiceCreateOutput")
		case "ok":
			out.Values[i] = ec._PaymentInvoiceCreateOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._PaymentInvoiceCreateOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._PaymentInvoiceCreateOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentInvoiceFindOutputImplementors = []string{"PaymentInvoiceFindOutput", "CoreOutput"}

func (ec *executionContext) _PaymentInvoiceFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentInvoiceFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentInvoiceFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentInvoiceFindOutput")
		case "ok":
			out.Values[i] = ec._PaymentInvoiceFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._PaymentInvoiceFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._PaymentInvoiceFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentMutationImplementors = []string{"PaymentMutation"}

func (ec *executionContext) _PaymentMutation(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentMutation")
		case "approveConfirmation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentMutation_approveConfirmation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createInvoice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentMutation_createInvoice(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createConfirmation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentMutation_createConfirmation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personImplementors = []string{"Person"}

func (ec *executionContext) _Person(ctx context.Context, sel ast.SelectionSet, obj *model.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "id":
			out.Values[i] = ec._Person_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Person_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Person_phone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personFindOutputImplementors = []string{"PersonFindOutput", "CoreOutput"}

func (ec *executionContext) _PersonFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PersonFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonFindOutput")
		case "ok":
			out.Values[i] = ec._PersonFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._PersonFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._PersonFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "access":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_access(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "contract":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contract(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "email":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_email(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "navigation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_navigation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "request":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_request(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestImplementors = []string{"Request"}

func (ec *executionContext) _Request(ctx context.Context, sel ast.SelectionSet, obj *model.Request) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Request")
		case "id":
			out.Values[i] = ec._Request_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "serviceTypeID":
			out.Values[i] = ec._Request_serviceTypeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "serviceType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_serviceType(ctx, field, obj)
				return res
			})
		case "contractorID":
			out.Values[i] = ec._Request_contractorID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contractor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_contractor(ctx, field, obj)
				return res
			})
		case "organizationContactID":
			out.Values[i] = ec._Request_organizationContactID(ctx, field, obj)
		case "organizationContact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_organizationContact(ctx, field, obj)
				return res
			})
		case "contractMediumType":
			out.Values[i] = ec._Request_contractMediumType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contractFilledTemplateID":
			out.Values[i] = ec._Request_contractFilledTemplateID(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Request_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Request_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "bankAccountID":
			out.Values[i] = ec._Request_bankAccountID(ctx, field, obj)
		case "bankAccount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_bankAccount(ctx, field, obj)
				return res
			})
		case "signatoryID":
			out.Values[i] = ec._Request_signatoryID(ctx, field, obj)
		case "signatory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_signatory(ctx, field, obj)
				return res
			})
		case "ships":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_ships(ctx, field, obj)
				return res
			})
		case "contracts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Request_contracts(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestInfoOutputImplementors = []string{"RequestInfoOutput", "CoreOutput"}

func (ec *executionContext) _RequestInfoOutput(ctx context.Context, sel ast.SelectionSet, obj *model.RequestInfoOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestInfoOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestInfoOutput")
		case "ok":
			out.Values[i] = ec._RequestInfoOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._RequestInfoOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._RequestInfoOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestListOutputImplementors = []string{"RequestListOutput", "CoreOutput"}

func (ec *executionContext) _RequestListOutput(ctx context.Context, sel ast.SelectionSet, obj *model.RequestListOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestListOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestListOutput")
		case "ok":
			out.Values[i] = ec._RequestListOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._RequestListOutput_error(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._RequestListOutput_pagination(ctx, field, obj)
		case "record":
			out.Values[i] = ec._RequestListOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestMutationImplementors = []string{"RequestMutation"}

func (ec *executionContext) _RequestMutation(ctx context.Context, sel ast.SelectionSet, obj *model.RequestMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestMutation")
		case "updateStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RequestMutation_updateStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestQueryImplementors = []string{"RequestQuery"}

func (ec *executionContext) _RequestQuery(ctx context.Context, sel ast.SelectionSet, obj *model.RequestQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestQuery")
		case "id":
			out.Values[i] = ec._RequestQuery_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RequestQuery_info(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "list":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RequestQuery_list(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestUpdateStatusOutputImplementors = []string{"RequestUpdateStatusOutput", "CoreOutput"}

func (ec *executionContext) _RequestUpdateStatusOutput(ctx context.Context, sel ast.SelectionSet, obj *model.RequestUpdateStatusOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestUpdateStatusOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestUpdateStatusOutput")
		case "ok":
			out.Values[i] = ec._RequestUpdateStatusOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._RequestUpdateStatusOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._RequestUpdateStatusOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceTypeImplementors = []string{"ServiceType"}

func (ec *executionContext) _ServiceType(ctx context.Context, sel ast.SelectionSet, obj *model.ServiceType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceType")
		case "id":
			out.Values[i] = ec._ServiceType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ServiceType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceTypeGetOutputImplementors = []string{"ServiceTypeGetOutput", "CoreOutput"}

func (ec *executionContext) _ServiceTypeGetOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ServiceTypeGetOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceTypeGetOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceTypeGetOutput")
		case "ok":
			out.Values[i] = ec._ServiceTypeGetOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ServiceTypeGetOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._ServiceTypeGetOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shipImplementors = []string{"Ship"}

func (ec *executionContext) _Ship(ctx context.Context, sel ast.SelectionSet, obj *model.Ship) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shipImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ship")
		case "id":
			out.Values[i] = ec._Ship_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Ship_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hullNumber":
			out.Values[i] = ec._Ship_hullNumber(ctx, field, obj)
		case "projectNumber":
			out.Values[i] = ec._Ship_projectNumber(ctx, field, obj)
		case "length":
			out.Values[i] = ec._Ship_length(ctx, field, obj)
		case "width":
			out.Values[i] = ec._Ship_width(ctx, field, obj)
		case "hullHeight":
			out.Values[i] = ec._Ship_hullHeight(ctx, field, obj)
		case "cubic":
			out.Values[i] = ec._Ship_cubic(ctx, field, obj)
		case "flag":
			out.Values[i] = ec._Ship_flag(ctx, field, obj)
		case "shipConfirmParamsCertificateIds":
			out.Values[i] = ec._Ship_shipConfirmParamsCertificateIds(ctx, field, obj)
		case "ownerShipRightsCertificateIds":
			out.Values[i] = ec._Ship_ownerShipRightsCertificateIds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shipGetOutputImplementors = []string{"ShipGetOutput", "CoreOutput"}

func (ec *executionContext) _ShipGetOutput(ctx context.Context, sel ast.SelectionSet, obj *model.ShipGetOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shipGetOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShipGetOutput")
		case "ok":
			out.Values[i] = ec._ShipGetOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._ShipGetOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._ShipGetOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var signatoryImplementors = []string{"Signatory"}

func (ec *executionContext) _Signatory(ctx context.Context, sel ast.SelectionSet, obj *model.Signatory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signatoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Signatory")
		case "id":
			out.Values[i] = ec._Signatory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Signatory_name(ctx, field, obj)
		case "actingBasis":
			out.Values[i] = ec._Signatory_actingBasis(ctx, field, obj)
		case "warrantNumber":
			out.Values[i] = ec._Signatory_warrantNumber(ctx, field, obj)
		case "warrantDate":
			out.Values[i] = ec._Signatory_warrantDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var signatoryGetOutputImplementors = []string{"SignatoryGetOutput", "CoreOutput"}

func (ec *executionContext) _SignatoryGetOutput(ctx context.Context, sel ast.SelectionSet, obj *model.SignatoryGetOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signatoryGetOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignatoryGetOutput")
		case "ok":
			out.Values[i] = ec._SignatoryGetOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._SignatoryGetOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._SignatoryGetOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unauthorizedErrorProblemImplementors = []string{"UnauthorizedErrorProblem", "ProblemInterface"}

func (ec *executionContext) _UnauthorizedErrorProblem(ctx context.Context, sel ast.SelectionSet, obj *model.UnauthorizedErrorProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unauthorizedErrorProblemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnauthorizedErrorProblem")
		case "message":
			out.Values[i] = ec._UnauthorizedErrorProblem_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unauthorizedOutputImplementors = []string{"UnauthorizedOutput", "CoreOutput"}

func (ec *executionContext) _UnauthorizedOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UnauthorizedOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unauthorizedOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnauthorizedOutput")
		case "ok":
			out.Values[i] = ec._UnauthorizedOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UnauthorizedOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unknowErrorProblemImplementors = []string{"UnknowErrorProblem", "ProblemInterface"}

func (ec *executionContext) _UnknowErrorProblem(ctx context.Context, sel ast.SelectionSet, obj *model.UnknowErrorProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unknowErrorProblemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnknowErrorProblem")
		case "message":
			out.Values[i] = ec._UnknowErrorProblem_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fullName":
			out.Values[i] = ec._User_fullName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "baseRole":
			out.Values[i] = ec._User_baseRole(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "navigation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_navigation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "access":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_access(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serviceTypes":
			out.Values[i] = ec._User_serviceTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCreateOutputImplementors = []string{"UserCreateOutput", "CoreOutput"}

func (ec *executionContext) _UserCreateOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserCreateOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCreateOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCreateOutput")
		case "ok":
			out.Values[i] = ec._UserCreateOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserCreateOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserCreateOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userDeleteOutputImplementors = []string{"UserDeleteOutput", "CoreOutput"}

func (ec *executionContext) _UserDeleteOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserDeleteOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDeleteOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDeleteOutput")
		case "ok":
			out.Values[i] = ec._UserDeleteOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserDeleteOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userFindOutputImplementors = []string{"UserFindOutput", "CoreOutput"}

func (ec *executionContext) _UserFindOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserFindOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userFindOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserFindOutput")
		case "ok":
			out.Values[i] = ec._UserFindOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserFindOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserFindOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userGrantRequestAccessOutputImplementors = []string{"UserGrantRequestAccessOutput", "CoreOutput"}

func (ec *executionContext) _UserGrantRequestAccessOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserGrantRequestAccessOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userGrantRequestAccessOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserGrantRequestAccessOutput")
		case "ok":
			out.Values[i] = ec._UserGrantRequestAccessOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserGrantRequestAccessOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserGrantRequestAccessOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userListOutputImplementors = []string{"UserListOutput", "CoreOutput"}

func (ec *executionContext) _UserListOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserListOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userListOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserListOutput")
		case "ok":
			out.Values[i] = ec._UserListOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserListOutput_error(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._UserListOutput_pagination(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserListOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLoginOutputImplementors = []string{"UserLoginOutput", "CoreOutput"}

func (ec *executionContext) _UserLoginOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserLoginOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLoginOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLoginOutput")
		case "ok":
			out.Values[i] = ec._UserLoginOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserLoginOutput_error(ctx, field, obj)
		case "accessToken":
			out.Values[i] = ec._UserLoginOutput_accessToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLogoutOutputImplementors = []string{"UserLogoutOutput", "CoreOutput"}

func (ec *executionContext) _UserLogoutOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserLogoutOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLogoutOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLogoutOutput")
		case "ok":
			out.Values[i] = ec._UserLogoutOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserLogoutOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userMeOutputImplementors = []string{"UserMeOutput", "CoreOutput"}

func (ec *executionContext) _UserMeOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserMeOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userMeOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMeOutput")
		case "ok":
			out.Values[i] = ec._UserMeOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserMeOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserMeOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userMutationImplementors = []string{"UserMutation"}

func (ec *executionContext) _UserMutation(ctx context.Context, sel ast.SelectionSet, obj *model.UserMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "delete":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_delete(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "grantRequestAccess":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_grantRequestAccess(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "login":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_login(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "logout":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_logout(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updateMain":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_updateMain(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updateMe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_updateMe(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updatePassword":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_updatePassword(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userQueryImplementors = []string{"UserQuery"}

func (ec *executionContext) _UserQuery(ctx context.Context, sel ast.SelectionSet, obj *model.UserQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserQuery")
		case "id":
			out.Values[i] = ec._UserQuery_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "find":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserQuery_find(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "list":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserQuery_list(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "me":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserQuery_me(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "refresh":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserQuery_refresh(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRefreshOutputImplementors = []string{"UserRefreshOutput", "CoreOutput"}

func (ec *executionContext) _UserRefreshOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserRefreshOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRefreshOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRefreshOutput")
		case "ok":
			out.Values[i] = ec._UserRefreshOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserRefreshOutput_error(ctx, field, obj)
		case "accessToken":
			out.Values[i] = ec._UserRefreshOutput_accessToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userUpdateMainOutputImplementors = []string{"UserUpdateMainOutput", "CoreOutput"}

func (ec *executionContext) _UserUpdateMainOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserUpdateMainOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userUpdateMainOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserUpdateMainOutput")
		case "ok":
			out.Values[i] = ec._UserUpdateMainOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserUpdateMainOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserUpdateMainOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userUpdateMeOutputImplementors = []string{"UserUpdateMeOutput", "CoreOutput"}

func (ec *executionContext) _UserUpdateMeOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserUpdateMeOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userUpdateMeOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserUpdateMeOutput")
		case "ok":
			out.Values[i] = ec._UserUpdateMeOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserUpdateMeOutput_error(ctx, field, obj)
		case "record":
			out.Values[i] = ec._UserUpdateMeOutput_record(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userUpdatePasswordOutputImplementors = []string{"UserUpdatePasswordOutput", "CoreOutput"}

func (ec *executionContext) _UserUpdatePasswordOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UserUpdatePasswordOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userUpdatePasswordOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserUpdatePasswordOutput")
		case "ok":
			out.Values[i] = ec._UserUpdatePasswordOutput_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._UserUpdatePasswordOutput_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var validationErrorProblemImplementors = []string{"ValidationErrorProblem", "ProblemInterface"}

func (ec *executionContext) _ValidationErrorProblem(ctx context.Context, sel ast.SelectionSet, obj *model.ValidationErrorProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, validationErrorProblemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValidationErrorProblem")
		case "field":
			out.Values[i] = ec._ValidationErrorProblem_field(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._ValidationErrorProblem_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccess2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccess(ctx context.Context, sel ast.SelectionSet, v *model.Access) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Access(ctx, sel, v)
}

func (ec *executionContext) marshalNAccessFindOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessFindOutput(ctx context.Context, sel ast.SelectionSet, v model.AccessFindOutput) graphql.Marshaler {
	return ec._AccessFindOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.AccessFindOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessFindOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNAccessQuery2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessQuery(ctx context.Context, sel ast.SelectionSet, v model.AccessQuery) graphql.Marshaler {
	return ec._AccessQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessQuery(ctx context.Context, sel ast.SelectionSet, v *model.AccessQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx context.Context, v interface{}) (model.BaseRole, error) {
	var res model.BaseRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBaseRole2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx context.Context, sel ast.SelectionSet, v model.BaseRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNContactListOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContactListOutput(ctx context.Context, sel ast.SelectionSet, v model.ContactListOutput) graphql.Marshaler {
	return ec._ContactListOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNContactListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContactListOutput(ctx context.Context, sel ast.SelectionSet, v *model.ContactListOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ContactListOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNContract2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContractCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractCreateInput(ctx context.Context, v interface{}) (model.ContractCreateInput, error) {
	res, err := ec.unmarshalInputContractCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractCreateOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractCreateOutput(ctx context.Context, sel ast.SelectionSet, v model.ContractCreateOutput) graphql.Marshaler {
	return ec._ContractCreateOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNContractCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractCreateOutput(ctx context.Context, sel ast.SelectionSet, v *model.ContractCreateOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ContractCreateOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContractFindInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractFindInput(ctx context.Context, v interface{}) (model.ContractFindInput, error) {
	res, err := ec.unmarshalInputContractFindInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractFindOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractFindOutput(ctx context.Context, sel ast.SelectionSet, v model.ContractFindOutput) graphql.Marshaler {
	return ec._ContractFindOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNContractFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.ContractFindOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ContractFindOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContractListInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractListInput(ctx context.Context, v interface{}) (model.ContractListInput, error) {
	res, err := ec.unmarshalInputContractListInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContractMediumType2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractMediumType(ctx context.Context, v interface{}) (model.ContractMediumType, error) {
	var res model.ContractMediumType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractMediumType2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractMediumType(ctx context.Context, sel ast.SelectionSet, v model.ContractMediumType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContractMutation2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractMutation(ctx context.Context, sel ast.SelectionSet, v model.ContractMutation) graphql.Marshaler {
	return ec._ContractMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNContractMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractMutation(ctx context.Context, sel ast.SelectionSet, v *model.ContractMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ContractMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNContractQuery2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractQuery(ctx context.Context, sel ast.SelectionSet, v model.ContractQuery) graphql.Marshaler {
	return ec._ContractQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNContractQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractQuery(ctx context.Context, sel ast.SelectionSet, v *model.ContractQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ContractQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContractorType2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractorType(ctx context.Context, v interface{}) (model.ContractorType, error) {
	var res model.ContractorType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractorType2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractorType(ctx context.Context, sel ast.SelectionSet, v model.ContractorType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEmailQuery2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailQuery(ctx context.Context, sel ast.SelectionSet, v model.EmailQuery) graphql.Marshaler {
	return ec._EmailQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailQuery(ctx context.Context, sel ast.SelectionSet, v *model.EmailQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailSendInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailSendInput(ctx context.Context, v interface{}) (model.EmailSendInput, error) {
	res, err := ec.unmarshalInputEmailSendInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailSendOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailSendOutput(ctx context.Context, sel ast.SelectionSet, v model.EmailSendOutput) graphql.Marshaler {
	return ec._EmailSendOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailSendOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐEmailSendOutput(ctx context.Context, sel ast.SelectionSet, v *model.EmailSendOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailSendOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFileCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileCreateInput(ctx context.Context, v interface{}) (model.FileCreateInput, error) {
	res, err := ec.unmarshalInputFileCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileCreateOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileCreateOutput(ctx context.Context, sel ast.SelectionSet, v model.FileCreateOutput) graphql.Marshaler {
	return ec._FileCreateOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNFileCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileCreateOutput(ctx context.Context, sel ast.SelectionSet, v *model.FileCreateOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FileCreateOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNFileMutation2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileMutation(ctx context.Context, sel ast.SelectionSet, v model.FileMutation) graphql.Marshaler {
	return ec._FileMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNFileMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFileMutation(ctx context.Context, sel ast.SelectionSet, v *model.FileMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FileMutation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNNavigation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigation(ctx context.Context, sel ast.SelectionSet, v *model.Navigation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Navigation(ctx, sel, v)
}

func (ec *executionContext) marshalNNavigationFindOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationFindOutput(ctx context.Context, sel ast.SelectionSet, v model.NavigationFindOutput) graphql.Marshaler {
	return ec._NavigationFindOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNNavigationFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.NavigationFindOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NavigationFindOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNNavigationQuery2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationQuery(ctx context.Context, sel ast.SelectionSet, v model.NavigationQuery) graphql.Marshaler {
	return ec._NavigationQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNNavigationQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationQuery(ctx context.Context, sel ast.SelectionSet, v *model.NavigationQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NavigationQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaginationInput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationInput(ctx context.Context, v interface{}) (*model.PaginationInput, error) {
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPaymentConfirmationApproveInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationApproveInput(ctx context.Context, v interface{}) (model.PaymentConfirmationApproveInput, error) {
	res, err := ec.unmarshalInputPaymentConfirmationApproveInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentConfirmationApproveOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationApproveOutput(ctx context.Context, sel ast.SelectionSet, v model.PaymentConfirmationApproveOutput) graphql.Marshaler {
	return ec._PaymentConfirmationApproveOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentConfirmationApproveOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationApproveOutput(ctx context.Context, sel ast.SelectionSet, v *model.PaymentConfirmationApproveOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentConfirmationApproveOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentConfirmationCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationCreateInput(ctx context.Context, v interface{}) (model.PaymentConfirmationCreateInput, error) {
	res, err := ec.unmarshalInputPaymentConfirmationCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentConfirmationCreateOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationCreateOutput(ctx context.Context, sel ast.SelectionSet, v model.PaymentConfirmationCreateOutput) graphql.Marshaler {
	return ec._PaymentConfirmationCreateOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentConfirmationCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationCreateOutput(ctx context.Context, sel ast.SelectionSet, v *model.PaymentConfirmationCreateOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentConfirmationCreateOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentInvoice2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoice(ctx context.Context, sel ast.SelectionSet, v *model.PaymentInvoice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentInvoice(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentInvoiceCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceCreateInput(ctx context.Context, v interface{}) (model.PaymentInvoiceCreateInput, error) {
	res, err := ec.unmarshalInputPaymentInvoiceCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentInvoiceCreateOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceCreateOutput(ctx context.Context, sel ast.SelectionSet, v model.PaymentInvoiceCreateOutput) graphql.Marshaler {
	return ec._PaymentInvoiceCreateOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentInvoiceCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceCreateOutput(ctx context.Context, sel ast.SelectionSet, v *model.PaymentInvoiceCreateOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentInvoiceCreateOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentMutation2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentMutation(ctx context.Context, sel ast.SelectionSet, v model.PaymentMutation) graphql.Marshaler {
	return ec._PaymentMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentMutation(ctx context.Context, sel ast.SelectionSet, v *model.PaymentMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNProblemInterface2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterface(ctx context.Context, sel ast.SelectionSet, v model.ProblemInterface) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProblemInterface(ctx, sel, v)
}

func (ec *executionContext) marshalNRequest2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequest(ctx context.Context, sel ast.SelectionSet, v *model.Request) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Request(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRequestInfoInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoInput(ctx context.Context, v interface{}) (model.RequestInfoInput, error) {
	res, err := ec.unmarshalInputRequestInfoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRequestInfoOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoOutput(ctx context.Context, sel ast.SelectionSet, v model.RequestInfoOutput) graphql.Marshaler {
	return ec._RequestInfoOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestInfoOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoOutput(ctx context.Context, sel ast.SelectionSet, v *model.RequestInfoOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestInfoOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRequestListInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestListInput(ctx context.Context, v interface{}) (model.RequestListInput, error) {
	res, err := ec.unmarshalInputRequestListInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRequestListOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestListOutput(ctx context.Context, sel ast.SelectionSet, v model.RequestListOutput) graphql.Marshaler {
	return ec._RequestListOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestListOutput(ctx context.Context, sel ast.SelectionSet, v *model.RequestListOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestListOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNRequestMutation2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestMutation(ctx context.Context, sel ast.SelectionSet, v model.RequestMutation) graphql.Marshaler {
	return ec._RequestMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestMutation(ctx context.Context, sel ast.SelectionSet, v *model.RequestMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNRequestQuery2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestQuery(ctx context.Context, sel ast.SelectionSet, v model.RequestQuery) graphql.Marshaler {
	return ec._RequestQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestQuery(ctx context.Context, sel ast.SelectionSet, v *model.RequestQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRequestStatus2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx context.Context, v interface{}) (model.RequestStatus, error) {
	var res model.RequestStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRequestStatus2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx context.Context, sel ast.SelectionSet, v model.RequestStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRequestUpdateStatusInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestUpdateStatusInput(ctx context.Context, v interface{}) (model.RequestUpdateStatusInput, error) {
	res, err := ec.unmarshalInputRequestUpdateStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRequestUpdateStatusOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestUpdateStatusOutput(ctx context.Context, sel ast.SelectionSet, v model.RequestUpdateStatusOutput) graphql.Marshaler {
	return ec._RequestUpdateStatusOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestUpdateStatusOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestUpdateStatusOutput(ctx context.Context, sel ast.SelectionSet, v *model.RequestUpdateStatusOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestUpdateStatusOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNShip2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐShip(ctx context.Context, sel ast.SelectionSet, v *model.Ship) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Ship(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUInt2uint(ctx context.Context, v interface{}) (uint, error) {
	res, err := model.UnmarshalUInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUInt2uint(ctx context.Context, sel ast.SelectionSet, v uint) graphql.Marshaler {
	res := model.MarshalUInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUInt2ᚕuintᚄ(ctx context.Context, v interface{}) ([]uint, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]uint, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUInt2uint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUInt2ᚕuintᚄ(ctx context.Context, sel ast.SelectionSet, v []uint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUInt2uint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserCreateInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserCreateInput(ctx context.Context, v interface{}) (model.UserCreateInput, error) {
	res, err := ec.unmarshalInputUserCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserCreateOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserCreateOutput(ctx context.Context, sel ast.SelectionSet, v model.UserCreateOutput) graphql.Marshaler {
	return ec._UserCreateOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserCreateOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserCreateOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserCreateOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserCreateOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNUserDeleteOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserDeleteOutput(ctx context.Context, sel ast.SelectionSet, v model.UserDeleteOutput) graphql.Marshaler {
	return ec._UserDeleteOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserDeleteOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserDeleteOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserDeleteOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserDeleteOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserFindInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserFindInput(ctx context.Context, v interface{}) (model.UserFindInput, error) {
	res, err := ec.unmarshalInputUserFindInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserFindOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserFindOutput(ctx context.Context, sel ast.SelectionSet, v model.UserFindOutput) graphql.Marshaler {
	return ec._UserFindOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserFindOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserFindOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserGrantRequestAccessInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserGrantRequestAccessInput(ctx context.Context, v interface{}) (model.UserGrantRequestAccessInput, error) {
	res, err := ec.unmarshalInputUserGrantRequestAccessInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserGrantRequestAccessOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserGrantRequestAccessOutput(ctx context.Context, sel ast.SelectionSet, v model.UserGrantRequestAccessOutput) graphql.Marshaler {
	return ec._UserGrantRequestAccessOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserGrantRequestAccessOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserGrantRequestAccessOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserGrantRequestAccessOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserGrantRequestAccessOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserListInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserListInput(ctx context.Context, v interface{}) (model.UserListInput, error) {
	res, err := ec.unmarshalInputUserListInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserListOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserListOutput(ctx context.Context, sel ast.SelectionSet, v model.UserListOutput) graphql.Marshaler {
	return ec._UserListOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserListOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserListOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserListOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserLoginInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLoginInput(ctx context.Context, v interface{}) (model.UserLoginInput, error) {
	res, err := ec.unmarshalInputUserLoginInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserLoginOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLoginOutput(ctx context.Context, sel ast.SelectionSet, v model.UserLoginOutput) graphql.Marshaler {
	return ec._UserLoginOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserLoginOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLoginOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserLoginOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserLoginOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNUserLogoutOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLogoutOutput(ctx context.Context, sel ast.SelectionSet, v model.UserLogoutOutput) graphql.Marshaler {
	return ec._UserLogoutOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserLogoutOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserLogoutOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserLogoutOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserLogoutOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNUserMeOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserMeOutput(ctx context.Context, sel ast.SelectionSet, v model.UserMeOutput) graphql.Marshaler {
	return ec._UserMeOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserMeOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserMeOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserMeOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserMeOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNUserMutation2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v model.UserMutation) graphql.Marshaler {
	return ec._UserMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserMutation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v *model.UserMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNUserQuery2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v model.UserQuery) graphql.Marshaler {
	return ec._UserQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserQuery2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v *model.UserQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNUserRefreshOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserRefreshOutput(ctx context.Context, sel ast.SelectionSet, v model.UserRefreshOutput) graphql.Marshaler {
	return ec._UserRefreshOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserRefreshOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserRefreshOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserRefreshOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserRefreshOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdateMainInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMainInput(ctx context.Context, v interface{}) (model.UserUpdateMainInput, error) {
	res, err := ec.unmarshalInputUserUpdateMainInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserUpdateMainOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMainOutput(ctx context.Context, sel ast.SelectionSet, v model.UserUpdateMainOutput) graphql.Marshaler {
	return ec._UserUpdateMainOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserUpdateMainOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMainOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserUpdateMainOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserUpdateMainOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdateMeInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMeInput(ctx context.Context, v interface{}) (model.UserUpdateMeInput, error) {
	res, err := ec.unmarshalInputUserUpdateMeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserUpdateMeOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMeOutput(ctx context.Context, sel ast.SelectionSet, v model.UserUpdateMeOutput) graphql.Marshaler {
	return ec._UserUpdateMeOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserUpdateMeOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdateMeOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserUpdateMeOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserUpdateMeOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdatePasswordInput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdatePasswordInput(ctx context.Context, v interface{}) (model.UserUpdatePasswordInput, error) {
	res, err := ec.unmarshalInputUserUpdatePasswordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserUpdatePasswordOutput2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdatePasswordOutput(ctx context.Context, sel ast.SelectionSet, v model.UserUpdatePasswordOutput) graphql.Marshaler {
	return ec._UserUpdatePasswordOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserUpdatePasswordOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserUpdatePasswordOutput(ctx context.Context, sel ast.SelectionSet, v *model.UserUpdatePasswordOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserUpdatePasswordOutput(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccess2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccessᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Access) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccess2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐAccess(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBankAccount2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBankAccount(ctx context.Context, sel ast.SelectionSet, v *model.BankAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BankAccount(ctx, sel, v)
}

func (ec *executionContext) marshalOBankAccountGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBankAccountGetOutput(ctx context.Context, sel ast.SelectionSet, v *model.BankAccountGetOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BankAccountGetOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBaseRole2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx context.Context, v interface{}) (*model.BaseRole, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BaseRole)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBaseRole2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐBaseRole(ctx context.Context, sel ast.SelectionSet, v *model.BaseRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOContactListOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContactListOutput(ctx context.Context, sel ast.SelectionSet, v *model.ContactListOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContactListOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOContract2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContract2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContract(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOContract2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) marshalOContractor2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractor(ctx context.Context, sel ast.SelectionSet, v *model.Contractor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contractor(ctx, sel, v)
}

func (ec *executionContext) marshalOContractorGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐContractorGetOutput(ctx context.Context, sel ast.SelectionSet, v *model.ContractorGetOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContractorGetOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOFile2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐFile(ctx context.Context, sel ast.SelectionSet, v *model.File) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalONavigation2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Navigation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNavigation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐNavigation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOOrderBy2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOrganizationContact2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrganizationContact(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationContact(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationContactGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐOrganizationContactGetOutput(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationContactGetOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationContactGetOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginationOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaginationOutput(ctx context.Context, sel ast.SelectionSet, v *model.PaginationOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginationOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentConfirmation2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmation(ctx context.Context, sel ast.SelectionSet, v *model.PaymentConfirmation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentConfirmation(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentConfirmationFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentConfirmationFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.PaymentConfirmationFindOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentConfirmationFindOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentInvoice2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PaymentInvoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPaymentInvoice2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPaymentInvoice2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoice(ctx context.Context, sel ast.SelectionSet, v *model.PaymentInvoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentInvoice(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentInvoiceFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPaymentInvoiceFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.PaymentInvoiceFindOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentInvoiceFindOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOPerson2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPerson(ctx context.Context, sel ast.SelectionSet, v *model.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) marshalOPersonFindOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐPersonFindOutput(ctx context.Context, sel ast.SelectionSet, v *model.PersonFindOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonFindOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOProblemInterface2ᚕgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterfaceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProblemInterface) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProblemInterface2githubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐProblemInterface(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORequest2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Request) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRequest2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORequest2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequest(ctx context.Context, sel ast.SelectionSet, v *model.Request) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Request(ctx, sel, v)
}

func (ec *executionContext) marshalORequestInfoOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestInfoOutput(ctx context.Context, sel ast.SelectionSet, v *model.RequestInfoOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RequestInfoOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalORequestStatus2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx context.Context, v interface{}) (*model.RequestStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RequestStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORequestStatus2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐRequestStatus(ctx context.Context, sel ast.SelectionSet, v *model.RequestStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOServiceType2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐServiceType(ctx context.Context, sel ast.SelectionSet, v *model.ServiceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceType(ctx, sel, v)
}

func (ec *executionContext) marshalOServiceTypeGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐServiceTypeGetOutput(ctx context.Context, sel ast.SelectionSet, v *model.ServiceTypeGetOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceTypeGetOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOShip2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐShipᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Ship) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShip2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐShip(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOShipGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐShipGetOutput(ctx context.Context, sel ast.SelectionSet, v *model.ShipGetOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShipGetOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOSignatory2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐSignatory(ctx context.Context, sel ast.SelectionSet, v *model.Signatory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Signatory(ctx, sel, v)
}

func (ec *executionContext) marshalOSignatoryGetOutput2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐSignatoryGetOutput(ctx context.Context, sel ast.SelectionSet, v *model.SignatoryGetOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignatoryGetOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOUInt2ᚕuintᚄ(ctx context.Context, v interface{}) ([]uint, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]uint, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUInt2uint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUInt2ᚕuintᚄ(ctx context.Context, sel ast.SelectionSet, v []uint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUInt2uint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOUInt2ᚖuint(ctx context.Context, v interface{}) (*uint, error) {
	if v == nil {
		return nil, nil
	}
	res, err := model.UnmarshalUInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUInt2ᚖuint(ctx context.Context, sel ast.SelectionSet, v *uint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return model.MarshalUInt(*v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋmarkiᚑerikerᚋkimᚑworkerᚑgoᚋinternalᚋgqlᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
