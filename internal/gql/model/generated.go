// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CoreOutput interface {
	IsCoreOutput()
}

type ProblemInterface interface {
	IsProblemInterface()
}

type Access struct {
	ID   uint   `json:"id"`
	Name string `json:"name"`
}

type AccessFindOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record []*Access          `json:"record"`
}

func (AccessFindOutput) IsCoreOutput() {}

type AccessQuery struct {
	Find *AccessFindOutput `json:"find"`
}

type BankAccount struct {
	ID                  uint   `json:"id"`
	AccountNumber       string `json:"accountNumber"`
	CorrespondentNumber string `json:"correspondentNumber"`
	Bik                 string `json:"bik"`
	BankName            string `json:"bankName"`
}

type BankAccountGetOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *BankAccount       `json:"record"`
}

func (BankAccountGetOutput) IsCoreOutput() {}

type ContactListOutput struct {
	Ok         bool               `json:"ok"`
	Error      []ProblemInterface `json:"error"`
	Pagination *PaginationOutput  `json:"pagination"`
	Record     []*Contract        `json:"record"`
}

func (ContactListOutput) IsCoreOutput() {}

type Contract struct {
	ID                uint                      `json:"id"`
	ServiceRequestID  uint                      `json:"serviceRequestID"`
	ServiceRequest    *RequestInfoOutput        `json:"serviceRequest"`
	Number            string                    `json:"number"`
	CreatedAt         time.Time                 `json:"createdAt"`
	ContractorID      uint                      `json:"contractorID"`
	Contractor        *ContractorGetOutput      `json:"contractor"`
	FileStorageItemID uint                      `json:"fileStorageItemID"`
	PaymentInvoice    *PaymentInvoiceFindOutput `json:"paymentInvoice"`
}

type ContractCreateInput struct {
	ContractNumber string `json:"contractNumber"`
	FileID         uint   `json:"fileId"`
	RequestID      uint   `json:"requestId"`
	ContractorID   uint   `json:"contractorId"`
}

type ContractCreateOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Contract          `json:"record"`
}

func (ContractCreateOutput) IsCoreOutput() {}

type ContractFindInput struct {
	ContractID uint `json:"contractID"`
}

type ContractFindOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Contract          `json:"record"`
}

func (ContractFindOutput) IsCoreOutput() {}

type ContractListInput struct {
	ServiceTypeID *uint            `json:"serviceTypeID"`
	Filter        *PaginationInput `json:"filter"`
}

type ContractMutation struct {
	Create *ContractCreateOutput `json:"create"`
}

type ContractQuery struct {
	ID   string              `json:"id"`
	Find *ContractFindOutput `json:"find"`
	List *ContactListOutput  `json:"list"`
}

type Contractor struct {
	ID             uint              `json:"id"`
	FillName       string            `json:"fillName"`
	ShortName      *string           `json:"shortName"`
	ContractorType ContractorType    `json:"contractorType"`
	PersonID       *uint             `json:"personId"`
	Person         *PersonFindOutput `json:"person"`
}

type ContractorGetOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Contractor        `json:"record"`
}

func (ContractorGetOutput) IsCoreOutput() {}

type File struct {
	ID               uint      `json:"id"`
	OriginalFileName string    `json:"originalFileName"`
	Extension        string    `json:"extension"`
	MimeType         string    `json:"mimeType"`
	Size             uint      `json:"size"`
	Checksum         string    `json:"checksum"`
	CreatedAt        time.Time `json:"createdAt"`
}

type FileCreateInput struct {
	FileName  string `json:"fileName"`
	Extension string `json:"extension"`
	MimeType  string `json:"mimeType"`
	Size      uint   `json:"size"`
	Checksum  string `json:"checksum"`
}

type FileCreateOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *File              `json:"record"`
}

func (FileCreateOutput) IsCoreOutput() {}

type FileMutation struct {
	Create *FileCreateOutput `json:"create"`
}

type ForbiddenErrorOutput struct {
	Ok    bool               `json:"ok"`
	Error []ProblemInterface `json:"error"`
}

func (ForbiddenErrorOutput) IsCoreOutput() {}

type ForbiddenErrorProblem struct {
	Message string `json:"message"`
}

func (ForbiddenErrorProblem) IsProblemInterface() {}

type InternalErrorOutput struct {
	Ok    bool               `json:"ok"`
	Error []ProblemInterface `json:"error"`
}

func (InternalErrorOutput) IsCoreOutput() {}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsProblemInterface() {}

type Navigation struct {
	ID          uint    `json:"id"`
	Path        string  `json:"path"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	Icon        *string `json:"icon"`
	ParentID    uint    `json:"parentId"`
	Order       uint    `json:"order"`
	Node        bool    `json:"node"`
	Dev         bool    `json:"dev"`
}

type NavigationFindOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record []*Navigation      `json:"record"`
}

func (NavigationFindOutput) IsCoreOutput() {}

type NavigationQuery struct {
	Find *NavigationFindOutput `json:"find"`
}

type OrganizationContact struct {
	ID    uint    `json:"id"`
	Phone *string `json:"phone"`
	Email *string `json:"email"`
}

type OrganizationContactGetOutput struct {
	Ok     bool                 `json:"ok"`
	Error  []ProblemInterface   `json:"error"`
	Record *OrganizationContact `json:"record"`
}

func (OrganizationContactGetOutput) IsCoreOutput() {}

type PaginationInput struct {
	Page       *int     `json:"page"`
	PageSize   *int     `json:"pageSize"`
	OrderField *string  `json:"orderField"`
	OrderBy    *OrderBy `json:"orderBy"`
}

type PaginationOutput struct {
	TotalItems      int  `json:"totalItems"`
	TotalPages      int  `json:"totalPages"`
	Page            int  `json:"page"`
	ItemsPerPage    int  `json:"itemsPerPage"`
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type PaymentConfirmation struct {
	ID               uint       `json:"id"`
	FileID           uint       `json:"fileID"`
	PaymentInvoiceID uint       `json:"paymentInvoiceID"`
	Proven           bool       `json:"proven"`
	ContractID       uint       `json:"contractID"`
	CreatedAt        time.Time  `json:"createdAt"`
	UpdatedAt        *time.Time `json:"updatedAt"`
}

type PaymentConfirmationApproveInput struct {
	ConfirmationID uint `json:"confirmationID"`
}

type PaymentConfirmationApproveOutput struct {
	Ok     bool                 `json:"ok"`
	Error  []ProblemInterface   `json:"error"`
	Record *PaymentConfirmation `json:"record"`
}

func (PaymentConfirmationApproveOutput) IsCoreOutput() {}

type PaymentConfirmationCreateInput struct {
	FileID     uint `json:"fileID"`
	InvoiceID  uint `json:"invoiceID"`
	ContractID uint `json:"contractID"`
}

type PaymentConfirmationCreateOutput struct {
	Ok     bool                 `json:"ok"`
	Error  []ProblemInterface   `json:"error"`
	Record *PaymentConfirmation `json:"record"`
}

func (PaymentConfirmationCreateOutput) IsCoreOutput() {}

type PaymentConfirmationFindOutput struct {
	Ok     bool                 `json:"ok"`
	Error  []ProblemInterface   `json:"error"`
	Record *PaymentConfirmation `json:"record"`
}

func (PaymentConfirmationFindOutput) IsCoreOutput() {}

type PaymentInvoice struct {
	ID           uint                           `json:"id"`
	ContractID   uint                           `json:"contractID"`
	FileID       uint                           `json:"fileID"`
	CreatedAt    time.Time                      `json:"createdAt"`
	Confirmation *PaymentConfirmationFindOutput `json:"confirmation"`
}

type PaymentInvoiceCreateInput struct {
	ContractID uint `json:"contractID"`
	FileID     uint `json:"fileID"`
}

type PaymentInvoiceCreateOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *PaymentInvoice    `json:"record"`
}

func (PaymentInvoiceCreateOutput) IsCoreOutput() {}

type PaymentInvoiceFindOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record []*PaymentInvoice  `json:"record"`
}

func (PaymentInvoiceFindOutput) IsCoreOutput() {}

type PaymentMutation struct {
	ApproveConfirmation *PaymentConfirmationApproveOutput `json:"approveConfirmation"`
	CreateInvoice       *PaymentInvoiceCreateOutput       `json:"createInvoice"`
	CreateConfirmation  *PaymentConfirmationCreateOutput  `json:"createConfirmation"`
}

type Person struct {
	ID    uint    `json:"id"`
	Email *string `json:"email"`
	Phone *string `json:"phone"`
}

type PersonFindOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Person            `json:"record"`
}

func (PersonFindOutput) IsCoreOutput() {}

type Request struct {
	ID                       uint                          `json:"id"`
	ServiceTypeID            uint                          `json:"serviceTypeID"`
	ServiceType              *ServiceTypeGetOutput         `json:"serviceType"`
	ContractorID             uint                          `json:"contractorID"`
	Contractor               *ContractorGetOutput          `json:"contractor"`
	OrganizationContactID    *uint                         `json:"organizationContactID"`
	OrganizationContact      *OrganizationContactGetOutput `json:"organizationContact"`
	ContractMediumType       ContractMediumType            `json:"contractMediumType"`
	ContractFilledTemplateID *uint                         `json:"contractFilledTemplateID"`
	Status                   RequestStatus                 `json:"status"`
	CreatedAt                time.Time                     `json:"createdAt"`
	BankAccountID            *uint                         `json:"bankAccountID"`
	BankAccount              *BankAccountGetOutput         `json:"bankAccount"`
	SignatoryID              *uint                         `json:"signatoryID"`
	Signatory                *SignatoryGetOutput           `json:"signatory"`
	Ships                    *ShipGetOutput                `json:"ships"`
	Contracts                *ContactListOutput            `json:"contracts"`
}

type RequestInfoInput struct {
	RequestID uint `json:"requestID"`
}

type RequestInfoOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Request           `json:"record"`
}

func (RequestInfoOutput) IsCoreOutput() {}

type RequestListInput struct {
	ServiceID *uint            `json:"serviceID"`
	Status    *RequestStatus   `json:"status"`
	Filter    *PaginationInput `json:"filter"`
}

type RequestListOutput struct {
	Ok         bool               `json:"ok"`
	Error      []ProblemInterface `json:"error"`
	Pagination *PaginationOutput  `json:"pagination"`
	Record     []*Request         `json:"record"`
}

func (RequestListOutput) IsCoreOutput() {}

type RequestMutation struct {
	UpdateStatus *RequestUpdateStatusOutput `json:"updateStatus"`
}

type RequestQuery struct {
	ID   string             `json:"id"`
	Info *RequestInfoOutput `json:"info"`
	List *RequestListOutput `json:"list"`
}

type RequestUpdateStatusInput struct {
	RequestID uint          `json:"requestID"`
	NewStatus RequestStatus `json:"newStatus"`
}

type RequestUpdateStatusOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Request           `json:"record"`
}

func (RequestUpdateStatusOutput) IsCoreOutput() {}

type ServiceType struct {
	ID   uint   `json:"id"`
	Name string `json:"name"`
}

type ServiceTypeGetOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *ServiceType       `json:"record"`
}

func (ServiceTypeGetOutput) IsCoreOutput() {}

type Ship struct {
	ID                              uint     `json:"id"`
	Name                            string   `json:"name"`
	HullNumber                      *string  `json:"hullNumber"`
	ProjectNumber                   *string  `json:"projectNumber"`
	Length                          *float64 `json:"length"`
	Width                           *float64 `json:"width"`
	HullHeight                      *float64 `json:"hullHeight"`
	Cubic                           *float64 `json:"cubic"`
	Flag                            *string  `json:"flag"`
	ShipConfirmParamsCertificateIds []uint   `json:"shipConfirmParamsCertificateIds"`
	OwnerShipRightsCertificateIds   []uint   `json:"ownerShipRightsCertificateIds"`
}

type ShipGetOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record []*Ship            `json:"record"`
}

func (ShipGetOutput) IsCoreOutput() {}

type Signatory struct {
	ID            uint       `json:"id"`
	Name          *string    `json:"name"`
	ActingBasis   *string    `json:"actingBasis"`
	WarrantNumber *string    `json:"warrantNumber"`
	WarrantDate   *time.Time `json:"warrantDate"`
}

type SignatoryGetOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *Signatory         `json:"record"`
}

func (SignatoryGetOutput) IsCoreOutput() {}

type UnauthorizedErrorProblem struct {
	Message string `json:"message"`
}

func (UnauthorizedErrorProblem) IsProblemInterface() {}

type UnauthorizedOutput struct {
	Ok    bool               `json:"ok"`
	Error []ProblemInterface `json:"error"`
}

func (UnauthorizedOutput) IsCoreOutput() {}

type UnknowErrorProblem struct {
	Message string `json:"message"`
}

func (UnknowErrorProblem) IsProblemInterface() {}

type User struct {
	ID           uint                  `json:"id"`
	Email        string                `json:"email"`
	FullName     string                `json:"fullName"`
	BaseRole     BaseRole              `json:"baseRole"`
	CreatedAt    time.Time             `json:"createdAt"`
	UpdatedAt    time.Time             `json:"updatedAt"`
	Navigation   *NavigationFindOutput `json:"navigation"`
	Access       *AccessFindOutput     `json:"access"`
	ServiceTypes []uint                `json:"serviceTypes"`
}

type UserCreateInput struct {
	Email    string   `json:"email"`
	FullName string   `json:"fullName"`
	BaseRole BaseRole `json:"baseRole"`
	Password string   `json:"password"`
}

type UserCreateOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *User              `json:"record"`
}

func (UserCreateOutput) IsCoreOutput() {}

type UserDeleteOutput struct {
	Ok    bool               `json:"ok"`
	Error []ProblemInterface `json:"error"`
}

func (UserDeleteOutput) IsCoreOutput() {}

type UserFindInput struct {
	UserID uint `json:"userID"`
}

type UserFindOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *User              `json:"record"`
}

func (UserFindOutput) IsCoreOutput() {}

type UserGrantRequestAccessInput struct {
	UserID       uint   `json:"userID"`
	ServiceTypes []uint `json:"serviceTypes"`
}

type UserGrantRequestAccessOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *User              `json:"record"`
}

func (UserGrantRequestAccessOutput) IsCoreOutput() {}

type UserListInput struct {
	Filter *PaginationInput `json:"filter"`
}

type UserListOutput struct {
	Ok         bool               `json:"ok"`
	Error      []ProblemInterface `json:"error"`
	Pagination *PaginationOutput  `json:"pagination"`
	Record     []*User            `json:"record"`
}

func (UserListOutput) IsCoreOutput() {}

type UserLoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UserLoginOutput struct {
	Ok          bool               `json:"ok"`
	Error       []ProblemInterface `json:"error"`
	AccessToken *string            `json:"accessToken"`
}

func (UserLoginOutput) IsCoreOutput() {}

type UserLogoutOutput struct {
	Ok    bool               `json:"ok"`
	Error []ProblemInterface `json:"error"`
}

func (UserLogoutOutput) IsCoreOutput() {}

type UserMeOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *User              `json:"record"`
}

func (UserMeOutput) IsCoreOutput() {}

type UserMutation struct {
	Create             *UserCreateOutput             `json:"create"`
	Delete             *UserDeleteOutput             `json:"delete"`
	GrantRequestAccess *UserGrantRequestAccessOutput `json:"grantRequestAccess"`
	Login              *UserLoginOutput              `json:"login"`
	Logout             *UserLogoutOutput             `json:"logout"`
	UpdateMain         *UserUpdateMainOutput         `json:"updateMain"`
	UpdateMe           *UserUpdateMeOutput           `json:"updateMe"`
	UpdatePassword     *UserUpdatePasswordOutput     `json:"updatePassword"`
}

type UserQuery struct {
	ID      string             `json:"id"`
	Find    *UserFindOutput    `json:"find"`
	List    *UserListOutput    `json:"list"`
	Me      *UserMeOutput      `json:"me"`
	Refresh *UserRefreshOutput `json:"refresh"`
}

type UserRefreshOutput struct {
	Ok          bool               `json:"ok"`
	Error       []ProblemInterface `json:"error"`
	AccessToken *string            `json:"accessToken"`
}

func (UserRefreshOutput) IsCoreOutput() {}

type UserUpdateMainInput struct {
	FullName *string   `json:"fullName"`
	Email    *string   `json:"email"`
	BaseRole *BaseRole `json:"baseRole"`
	UserID   uint      `json:"userID"`
}

type UserUpdateMainOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *User              `json:"record"`
}

func (UserUpdateMainOutput) IsCoreOutput() {}

type UserUpdateMeInput struct {
	FullName *string `json:"fullName"`
	Email    *string `json:"email"`
}

type UserUpdateMeOutput struct {
	Ok     bool               `json:"ok"`
	Error  []ProblemInterface `json:"error"`
	Record *User              `json:"record"`
}

func (UserUpdateMeOutput) IsCoreOutput() {}

type UserUpdatePasswordInput struct {
	ID       uint   `json:"id"`
	Password string `json:"password"`
}

type UserUpdatePasswordOutput struct {
	Ok    bool               `json:"ok"`
	Error []ProblemInterface `json:"error"`
}

func (UserUpdatePasswordOutput) IsCoreOutput() {}

type ValidationErrorProblem struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

func (ValidationErrorProblem) IsProblemInterface() {}

type BaseRole string

const (
	BaseRoleAdmin  BaseRole = "ADMIN"
	BaseRoleHead   BaseRole = "HEAD"
	BaseRoleWorker BaseRole = "WORKER"
	BaseRoleAny    BaseRole = "ANY"
)

var AllBaseRole = []BaseRole{
	BaseRoleAdmin,
	BaseRoleHead,
	BaseRoleWorker,
	BaseRoleAny,
}

func (e BaseRole) IsValid() bool {
	switch e {
	case BaseRoleAdmin, BaseRoleHead, BaseRoleWorker, BaseRoleAny:
		return true
	}
	return false
}

func (e BaseRole) String() string {
	return string(e)
}

func (e *BaseRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BaseRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BaseRole", str)
	}
	return nil
}

func (e BaseRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContractMediumType string

const (
	ContractMediumTypeElectronic ContractMediumType = "electronic"
	ContractMediumTypePaper      ContractMediumType = "paper"
)

var AllContractMediumType = []ContractMediumType{
	ContractMediumTypeElectronic,
	ContractMediumTypePaper,
}

func (e ContractMediumType) IsValid() bool {
	switch e {
	case ContractMediumTypeElectronic, ContractMediumTypePaper:
		return true
	}
	return false
}

func (e ContractMediumType) String() string {
	return string(e)
}

func (e *ContractMediumType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractMediumType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractMediumType", str)
	}
	return nil
}

func (e ContractMediumType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContractorType string

const (
	ContractorTypeOrganization ContractorType = "organization"
	ContractorTypePerson       ContractorType = "person"
)

var AllContractorType = []ContractorType{
	ContractorTypeOrganization,
	ContractorTypePerson,
}

func (e ContractorType) IsValid() bool {
	switch e {
	case ContractorTypeOrganization, ContractorTypePerson:
		return true
	}
	return false
}

func (e ContractorType) String() string {
	return string(e)
}

func (e *ContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractorType", str)
	}
	return nil
}

func (e ContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderBy string

const (
	OrderByAsc  OrderBy = "ASC"
	OrderByDesc OrderBy = "DESC"
)

var AllOrderBy = []OrderBy{
	OrderByAsc,
	OrderByDesc,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByAsc, OrderByDesc:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderBy", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestStatus string

const (
	RequestStatusPending   RequestStatus = "pending"
	RequestStatusRejected  RequestStatus = "rejected"
	RequestStatusAccepted  RequestStatus = "accepted"
	RequestStatusCompleted RequestStatus = "completed"
)

var AllRequestStatus = []RequestStatus{
	RequestStatusPending,
	RequestStatusRejected,
	RequestStatusAccepted,
	RequestStatusCompleted,
}

func (e RequestStatus) IsValid() bool {
	switch e {
	case RequestStatusPending, RequestStatusRejected, RequestStatusAccepted, RequestStatusCompleted:
		return true
	}
	return false
}

func (e RequestStatus) String() string {
	return string(e)
}

func (e *RequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestStatus", str)
	}
	return nil
}

func (e RequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
